//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.0
//     from Assets/InputSystem/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""4a564af1-33e2-458e-a006-b7be607df500"",
            ""actions"": [
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""de851836-f28e-4fa6-8859-76fd81b6eacf"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""873307c7-4a69-4f3a-ae5c-df876844782a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""NormalAttack"",
                    ""type"": ""Button"",
                    ""id"": ""e42038bb-8d9e-427d-a8e7-56332df96fea"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ChargedAttack"",
                    ""type"": ""Button"",
                    ""id"": ""cc737330-f11d-40f3-bfa2-b93c595c970a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Skill1"",
                    ""type"": ""Button"",
                    ""id"": ""8f8dea97-33ff-40b2-bd6b-704d4160e706"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Skill2"",
                    ""type"": ""Button"",
                    ""id"": ""0b9259c4-0db6-4e2c-bb91-1ff77bb0e8aa"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Skill3"",
                    ""type"": ""Button"",
                    ""id"": ""e084417a-fe4d-4893-90c2-46778ba7ac6a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""OpenInventory"",
                    ""type"": ""Button"",
                    ""id"": ""597baf7b-d159-41c8-a41f-adc4396b93ee"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""OpenMap"",
                    ""type"": ""Button"",
                    ""id"": ""87f91229-f34a-47e0-b526-b81948f59b5f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PressEsc"",
                    ""type"": ""Button"",
                    ""id"": ""6268452b-3310-43fe-9ba6-312dc693bd27"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ScrollWheel"",
                    ""type"": ""Value"",
                    ""id"": ""93db456a-9c2b-4a00-9933-b8b5828455c5"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""OpenConsole"",
                    ""type"": ""Button"",
                    ""id"": ""be144f32-6a3e-48f6-ab63-b7cd564893cd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a320dc5b-03bd-4fd1-80ca-d905d1d2adfe"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ac829007-0f16-471c-ac06-9312abd68a44"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b2ec0ba7-d3ae-4d31-8648-07174248baf2"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NormalAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""affeedf7-7859-4dcd-8f18-929ad0643a96"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChargedAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cf4c9ab9-aff1-40e7-81bc-f21ee8160940"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Skill1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4b872cf8-1f95-415d-861e-f9392f550a16"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Skill2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4ad86de2-9b23-4769-b6df-c29249d6f4f6"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Skill3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""32fb6f79-8c04-405f-94fa-b53e017e950c"",
                    ""path"": ""<Keyboard>/b"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OpenInventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a036acab-5a8b-46fb-80cd-061605de7655"",
                    ""path"": ""<Keyboard>/m"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OpenMap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5a8c38f8-4701-45b8-8fa0-0a5b9e1f8f98"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PressEsc"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""aed8e6dd-6fc5-4cb2-b7f5-5ea6f1f41384"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ScrollWheel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e4cdc78b-0a85-494d-b036-114d7d9dd91f"",
                    ""path"": ""<Keyboard>/t"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OpenConsole"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Inventory"",
            ""id"": ""f7bb0cba-b8b8-45d9-b5f5-2e35b64b2c80"",
            ""actions"": [
                {
                    ""name"": ""CloseInventory"",
                    ""type"": ""Button"",
                    ""id"": ""0bdd076f-a4ad-46ca-a9b8-6a6a3b2d062c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""NextInvPage"",
                    ""type"": ""Button"",
                    ""id"": ""2c3f63a5-0bf2-4b29-8a9e-21778d7fbc54"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PreviousInvPage"",
                    ""type"": ""Button"",
                    ""id"": ""92cb5b88-6c9d-46d3-b4e8-94ae995c75d3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""97790120-cde9-49a6-968b-2f6e4f5f353b"",
                    ""path"": ""<Keyboard>/b"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CloseInventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""71ba83f8-0c10-4764-808d-d7a2e167a303"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CloseInventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""82ac87f1-8bb9-428e-8eb2-64d58b07c699"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NextInvPage"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c6bf572d-8264-4c06-832f-d1b46d181493"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PreviousInvPage"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Map"",
            ""id"": ""e7bca92f-9ffa-4fa7-953f-f5f43d19f4e0"",
            ""actions"": [
                {
                    ""name"": ""CloseMap"",
                    ""type"": ""Button"",
                    ""id"": ""fbb65485-f709-46f4-b05c-5fb46ce782ce"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""60080c22-268a-4782-807f-0e129905388c"",
                    ""path"": ""<Keyboard>/m"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CloseMap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b48bc132-3d7a-4b64-bb00-3783aa3a1a39"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CloseMap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""EscMenu"",
            ""id"": ""e37169ab-2141-45b2-b8f2-f908d6aff557"",
            ""actions"": [
                {
                    ""name"": ""CloseEscMenu"",
                    ""type"": ""Button"",
                    ""id"": ""0ca8e250-fb9b-4449-940f-96a8a6e8d7f3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2d892eaa-539b-4dfc-8dd2-c2450ff45628"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CloseEscMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Dialogues"",
            ""id"": ""13693169-fd64-4564-8cb3-22f3f1eaf564"",
            ""actions"": [
                {
                    ""name"": ""Continue"",
                    ""type"": ""Button"",
                    ""id"": ""8f338682-d054-4015-bdd1-e1abfb8c4b8f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""45d51a7b-f33d-42dc-9eeb-100fc6e623fc"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Continue"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2e76799b-ed76-4fcc-ad24-ca380db3bf78"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Continue"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2c3eeb8c-021d-4d44-9602-268ceb191ae4"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Continue"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Console"",
            ""id"": ""603d602c-3204-4ceb-b793-f08323fdb08b"",
            ""actions"": [
                {
                    ""name"": ""ConfirmInput"",
                    ""type"": ""Button"",
                    ""id"": ""e450c977-14c3-4b57-a5dc-fd84e9142756"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CloseConsole"",
                    ""type"": ""Button"",
                    ""id"": ""90cfe7cb-ed01-4d4f-b64b-61ae7bbe2ae7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8bb25595-3d85-4868-8009-b6f4f2305ab0"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ConfirmInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""151aa0e2-aa5d-4c4e-ac2c-4039ddaec257"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CloseConsole"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""WeaponEnhance"",
            ""id"": ""786a271a-798c-4dea-bf7e-fa0a52a6fcfa"",
            ""actions"": [
                {
                    ""name"": ""CloseWeapDetails"",
                    ""type"": ""Button"",
                    ""id"": ""20b44d29-2430-402b-876c-c04b394bd141"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8417ed63-a2e6-41d4-96f1-3c9ac7b24062"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CloseWeapDetails"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Shop"",
            ""id"": ""564fdde7-9f9e-4373-9fde-06e56d97f720"",
            ""actions"": [
                {
                    ""name"": ""CloseShop"",
                    ""type"": ""Button"",
                    ""id"": ""c1f86ba7-376b-4482-bdff-b93eaab5c9a2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6a4cc679-c675-4c67-bf86-082b26262723"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CloseShop"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""ActiveBuffs"",
            ""id"": ""5304541b-3385-4a1e-9c54-4b324d2ffcc5"",
            ""actions"": [
                {
                    ""name"": ""ExitMenu"",
                    ""type"": ""Button"",
                    ""id"": ""3c55a18e-45e2-439a-b9e9-6a26ab1b4418"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ebf58d08-afae-4626-98bc-b8a8e9b5acfa"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ExitMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Look = m_Player.FindAction("Look", throwIfNotFound: true);
        m_Player_Interact = m_Player.FindAction("Interact", throwIfNotFound: true);
        m_Player_NormalAttack = m_Player.FindAction("NormalAttack", throwIfNotFound: true);
        m_Player_ChargedAttack = m_Player.FindAction("ChargedAttack", throwIfNotFound: true);
        m_Player_Skill1 = m_Player.FindAction("Skill1", throwIfNotFound: true);
        m_Player_Skill2 = m_Player.FindAction("Skill2", throwIfNotFound: true);
        m_Player_Skill3 = m_Player.FindAction("Skill3", throwIfNotFound: true);
        m_Player_OpenInventory = m_Player.FindAction("OpenInventory", throwIfNotFound: true);
        m_Player_OpenMap = m_Player.FindAction("OpenMap", throwIfNotFound: true);
        m_Player_PressEsc = m_Player.FindAction("PressEsc", throwIfNotFound: true);
        m_Player_ScrollWheel = m_Player.FindAction("ScrollWheel", throwIfNotFound: true);
        m_Player_OpenConsole = m_Player.FindAction("OpenConsole", throwIfNotFound: true);
        // Inventory
        m_Inventory = asset.FindActionMap("Inventory", throwIfNotFound: true);
        m_Inventory_CloseInventory = m_Inventory.FindAction("CloseInventory", throwIfNotFound: true);
        m_Inventory_NextInvPage = m_Inventory.FindAction("NextInvPage", throwIfNotFound: true);
        m_Inventory_PreviousInvPage = m_Inventory.FindAction("PreviousInvPage", throwIfNotFound: true);
        // Map
        m_Map = asset.FindActionMap("Map", throwIfNotFound: true);
        m_Map_CloseMap = m_Map.FindAction("CloseMap", throwIfNotFound: true);
        // EscMenu
        m_EscMenu = asset.FindActionMap("EscMenu", throwIfNotFound: true);
        m_EscMenu_CloseEscMenu = m_EscMenu.FindAction("CloseEscMenu", throwIfNotFound: true);
        // Dialogues
        m_Dialogues = asset.FindActionMap("Dialogues", throwIfNotFound: true);
        m_Dialogues_Continue = m_Dialogues.FindAction("Continue", throwIfNotFound: true);
        // Console
        m_Console = asset.FindActionMap("Console", throwIfNotFound: true);
        m_Console_ConfirmInput = m_Console.FindAction("ConfirmInput", throwIfNotFound: true);
        m_Console_CloseConsole = m_Console.FindAction("CloseConsole", throwIfNotFound: true);
        // WeaponEnhance
        m_WeaponEnhance = asset.FindActionMap("WeaponEnhance", throwIfNotFound: true);
        m_WeaponEnhance_CloseWeapDetails = m_WeaponEnhance.FindAction("CloseWeapDetails", throwIfNotFound: true);
        // Shop
        m_Shop = asset.FindActionMap("Shop", throwIfNotFound: true);
        m_Shop_CloseShop = m_Shop.FindAction("CloseShop", throwIfNotFound: true);
        // ActiveBuffs
        m_ActiveBuffs = asset.FindActionMap("ActiveBuffs", throwIfNotFound: true);
        m_ActiveBuffs_ExitMenu = m_ActiveBuffs.FindAction("ExitMenu", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_Look;
    private readonly InputAction m_Player_Interact;
    private readonly InputAction m_Player_NormalAttack;
    private readonly InputAction m_Player_ChargedAttack;
    private readonly InputAction m_Player_Skill1;
    private readonly InputAction m_Player_Skill2;
    private readonly InputAction m_Player_Skill3;
    private readonly InputAction m_Player_OpenInventory;
    private readonly InputAction m_Player_OpenMap;
    private readonly InputAction m_Player_PressEsc;
    private readonly InputAction m_Player_ScrollWheel;
    private readonly InputAction m_Player_OpenConsole;
    public struct PlayerActions
    {
        private @PlayerControls m_Wrapper;
        public PlayerActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Look => m_Wrapper.m_Player_Look;
        public InputAction @Interact => m_Wrapper.m_Player_Interact;
        public InputAction @NormalAttack => m_Wrapper.m_Player_NormalAttack;
        public InputAction @ChargedAttack => m_Wrapper.m_Player_ChargedAttack;
        public InputAction @Skill1 => m_Wrapper.m_Player_Skill1;
        public InputAction @Skill2 => m_Wrapper.m_Player_Skill2;
        public InputAction @Skill3 => m_Wrapper.m_Player_Skill3;
        public InputAction @OpenInventory => m_Wrapper.m_Player_OpenInventory;
        public InputAction @OpenMap => m_Wrapper.m_Player_OpenMap;
        public InputAction @PressEsc => m_Wrapper.m_Player_PressEsc;
        public InputAction @ScrollWheel => m_Wrapper.m_Player_ScrollWheel;
        public InputAction @OpenConsole => m_Wrapper.m_Player_OpenConsole;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @Look.started += instance.OnLook;
            @Look.performed += instance.OnLook;
            @Look.canceled += instance.OnLook;
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
            @NormalAttack.started += instance.OnNormalAttack;
            @NormalAttack.performed += instance.OnNormalAttack;
            @NormalAttack.canceled += instance.OnNormalAttack;
            @ChargedAttack.started += instance.OnChargedAttack;
            @ChargedAttack.performed += instance.OnChargedAttack;
            @ChargedAttack.canceled += instance.OnChargedAttack;
            @Skill1.started += instance.OnSkill1;
            @Skill1.performed += instance.OnSkill1;
            @Skill1.canceled += instance.OnSkill1;
            @Skill2.started += instance.OnSkill2;
            @Skill2.performed += instance.OnSkill2;
            @Skill2.canceled += instance.OnSkill2;
            @Skill3.started += instance.OnSkill3;
            @Skill3.performed += instance.OnSkill3;
            @Skill3.canceled += instance.OnSkill3;
            @OpenInventory.started += instance.OnOpenInventory;
            @OpenInventory.performed += instance.OnOpenInventory;
            @OpenInventory.canceled += instance.OnOpenInventory;
            @OpenMap.started += instance.OnOpenMap;
            @OpenMap.performed += instance.OnOpenMap;
            @OpenMap.canceled += instance.OnOpenMap;
            @PressEsc.started += instance.OnPressEsc;
            @PressEsc.performed += instance.OnPressEsc;
            @PressEsc.canceled += instance.OnPressEsc;
            @ScrollWheel.started += instance.OnScrollWheel;
            @ScrollWheel.performed += instance.OnScrollWheel;
            @ScrollWheel.canceled += instance.OnScrollWheel;
            @OpenConsole.started += instance.OnOpenConsole;
            @OpenConsole.performed += instance.OnOpenConsole;
            @OpenConsole.canceled += instance.OnOpenConsole;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @Look.started -= instance.OnLook;
            @Look.performed -= instance.OnLook;
            @Look.canceled -= instance.OnLook;
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
            @NormalAttack.started -= instance.OnNormalAttack;
            @NormalAttack.performed -= instance.OnNormalAttack;
            @NormalAttack.canceled -= instance.OnNormalAttack;
            @ChargedAttack.started -= instance.OnChargedAttack;
            @ChargedAttack.performed -= instance.OnChargedAttack;
            @ChargedAttack.canceled -= instance.OnChargedAttack;
            @Skill1.started -= instance.OnSkill1;
            @Skill1.performed -= instance.OnSkill1;
            @Skill1.canceled -= instance.OnSkill1;
            @Skill2.started -= instance.OnSkill2;
            @Skill2.performed -= instance.OnSkill2;
            @Skill2.canceled -= instance.OnSkill2;
            @Skill3.started -= instance.OnSkill3;
            @Skill3.performed -= instance.OnSkill3;
            @Skill3.canceled -= instance.OnSkill3;
            @OpenInventory.started -= instance.OnOpenInventory;
            @OpenInventory.performed -= instance.OnOpenInventory;
            @OpenInventory.canceled -= instance.OnOpenInventory;
            @OpenMap.started -= instance.OnOpenMap;
            @OpenMap.performed -= instance.OnOpenMap;
            @OpenMap.canceled -= instance.OnOpenMap;
            @PressEsc.started -= instance.OnPressEsc;
            @PressEsc.performed -= instance.OnPressEsc;
            @PressEsc.canceled -= instance.OnPressEsc;
            @ScrollWheel.started -= instance.OnScrollWheel;
            @ScrollWheel.performed -= instance.OnScrollWheel;
            @ScrollWheel.canceled -= instance.OnScrollWheel;
            @OpenConsole.started -= instance.OnOpenConsole;
            @OpenConsole.performed -= instance.OnOpenConsole;
            @OpenConsole.canceled -= instance.OnOpenConsole;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // Inventory
    private readonly InputActionMap m_Inventory;
    private List<IInventoryActions> m_InventoryActionsCallbackInterfaces = new List<IInventoryActions>();
    private readonly InputAction m_Inventory_CloseInventory;
    private readonly InputAction m_Inventory_NextInvPage;
    private readonly InputAction m_Inventory_PreviousInvPage;
    public struct InventoryActions
    {
        private @PlayerControls m_Wrapper;
        public InventoryActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @CloseInventory => m_Wrapper.m_Inventory_CloseInventory;
        public InputAction @NextInvPage => m_Wrapper.m_Inventory_NextInvPage;
        public InputAction @PreviousInvPage => m_Wrapper.m_Inventory_PreviousInvPage;
        public InputActionMap Get() { return m_Wrapper.m_Inventory; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InventoryActions set) { return set.Get(); }
        public void AddCallbacks(IInventoryActions instance)
        {
            if (instance == null || m_Wrapper.m_InventoryActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_InventoryActionsCallbackInterfaces.Add(instance);
            @CloseInventory.started += instance.OnCloseInventory;
            @CloseInventory.performed += instance.OnCloseInventory;
            @CloseInventory.canceled += instance.OnCloseInventory;
            @NextInvPage.started += instance.OnNextInvPage;
            @NextInvPage.performed += instance.OnNextInvPage;
            @NextInvPage.canceled += instance.OnNextInvPage;
            @PreviousInvPage.started += instance.OnPreviousInvPage;
            @PreviousInvPage.performed += instance.OnPreviousInvPage;
            @PreviousInvPage.canceled += instance.OnPreviousInvPage;
        }

        private void UnregisterCallbacks(IInventoryActions instance)
        {
            @CloseInventory.started -= instance.OnCloseInventory;
            @CloseInventory.performed -= instance.OnCloseInventory;
            @CloseInventory.canceled -= instance.OnCloseInventory;
            @NextInvPage.started -= instance.OnNextInvPage;
            @NextInvPage.performed -= instance.OnNextInvPage;
            @NextInvPage.canceled -= instance.OnNextInvPage;
            @PreviousInvPage.started -= instance.OnPreviousInvPage;
            @PreviousInvPage.performed -= instance.OnPreviousInvPage;
            @PreviousInvPage.canceled -= instance.OnPreviousInvPage;
        }

        public void RemoveCallbacks(IInventoryActions instance)
        {
            if (m_Wrapper.m_InventoryActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IInventoryActions instance)
        {
            foreach (var item in m_Wrapper.m_InventoryActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_InventoryActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public InventoryActions @Inventory => new InventoryActions(this);

    // Map
    private readonly InputActionMap m_Map;
    private List<IMapActions> m_MapActionsCallbackInterfaces = new List<IMapActions>();
    private readonly InputAction m_Map_CloseMap;
    public struct MapActions
    {
        private @PlayerControls m_Wrapper;
        public MapActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @CloseMap => m_Wrapper.m_Map_CloseMap;
        public InputActionMap Get() { return m_Wrapper.m_Map; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MapActions set) { return set.Get(); }
        public void AddCallbacks(IMapActions instance)
        {
            if (instance == null || m_Wrapper.m_MapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MapActionsCallbackInterfaces.Add(instance);
            @CloseMap.started += instance.OnCloseMap;
            @CloseMap.performed += instance.OnCloseMap;
            @CloseMap.canceled += instance.OnCloseMap;
        }

        private void UnregisterCallbacks(IMapActions instance)
        {
            @CloseMap.started -= instance.OnCloseMap;
            @CloseMap.performed -= instance.OnCloseMap;
            @CloseMap.canceled -= instance.OnCloseMap;
        }

        public void RemoveCallbacks(IMapActions instance)
        {
            if (m_Wrapper.m_MapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMapActions instance)
        {
            foreach (var item in m_Wrapper.m_MapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MapActions @Map => new MapActions(this);

    // EscMenu
    private readonly InputActionMap m_EscMenu;
    private List<IEscMenuActions> m_EscMenuActionsCallbackInterfaces = new List<IEscMenuActions>();
    private readonly InputAction m_EscMenu_CloseEscMenu;
    public struct EscMenuActions
    {
        private @PlayerControls m_Wrapper;
        public EscMenuActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @CloseEscMenu => m_Wrapper.m_EscMenu_CloseEscMenu;
        public InputActionMap Get() { return m_Wrapper.m_EscMenu; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(EscMenuActions set) { return set.Get(); }
        public void AddCallbacks(IEscMenuActions instance)
        {
            if (instance == null || m_Wrapper.m_EscMenuActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_EscMenuActionsCallbackInterfaces.Add(instance);
            @CloseEscMenu.started += instance.OnCloseEscMenu;
            @CloseEscMenu.performed += instance.OnCloseEscMenu;
            @CloseEscMenu.canceled += instance.OnCloseEscMenu;
        }

        private void UnregisterCallbacks(IEscMenuActions instance)
        {
            @CloseEscMenu.started -= instance.OnCloseEscMenu;
            @CloseEscMenu.performed -= instance.OnCloseEscMenu;
            @CloseEscMenu.canceled -= instance.OnCloseEscMenu;
        }

        public void RemoveCallbacks(IEscMenuActions instance)
        {
            if (m_Wrapper.m_EscMenuActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IEscMenuActions instance)
        {
            foreach (var item in m_Wrapper.m_EscMenuActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_EscMenuActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public EscMenuActions @EscMenu => new EscMenuActions(this);

    // Dialogues
    private readonly InputActionMap m_Dialogues;
    private List<IDialoguesActions> m_DialoguesActionsCallbackInterfaces = new List<IDialoguesActions>();
    private readonly InputAction m_Dialogues_Continue;
    public struct DialoguesActions
    {
        private @PlayerControls m_Wrapper;
        public DialoguesActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Continue => m_Wrapper.m_Dialogues_Continue;
        public InputActionMap Get() { return m_Wrapper.m_Dialogues; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DialoguesActions set) { return set.Get(); }
        public void AddCallbacks(IDialoguesActions instance)
        {
            if (instance == null || m_Wrapper.m_DialoguesActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DialoguesActionsCallbackInterfaces.Add(instance);
            @Continue.started += instance.OnContinue;
            @Continue.performed += instance.OnContinue;
            @Continue.canceled += instance.OnContinue;
        }

        private void UnregisterCallbacks(IDialoguesActions instance)
        {
            @Continue.started -= instance.OnContinue;
            @Continue.performed -= instance.OnContinue;
            @Continue.canceled -= instance.OnContinue;
        }

        public void RemoveCallbacks(IDialoguesActions instance)
        {
            if (m_Wrapper.m_DialoguesActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDialoguesActions instance)
        {
            foreach (var item in m_Wrapper.m_DialoguesActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DialoguesActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DialoguesActions @Dialogues => new DialoguesActions(this);

    // Console
    private readonly InputActionMap m_Console;
    private List<IConsoleActions> m_ConsoleActionsCallbackInterfaces = new List<IConsoleActions>();
    private readonly InputAction m_Console_ConfirmInput;
    private readonly InputAction m_Console_CloseConsole;
    public struct ConsoleActions
    {
        private @PlayerControls m_Wrapper;
        public ConsoleActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @ConfirmInput => m_Wrapper.m_Console_ConfirmInput;
        public InputAction @CloseConsole => m_Wrapper.m_Console_CloseConsole;
        public InputActionMap Get() { return m_Wrapper.m_Console; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ConsoleActions set) { return set.Get(); }
        public void AddCallbacks(IConsoleActions instance)
        {
            if (instance == null || m_Wrapper.m_ConsoleActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ConsoleActionsCallbackInterfaces.Add(instance);
            @ConfirmInput.started += instance.OnConfirmInput;
            @ConfirmInput.performed += instance.OnConfirmInput;
            @ConfirmInput.canceled += instance.OnConfirmInput;
            @CloseConsole.started += instance.OnCloseConsole;
            @CloseConsole.performed += instance.OnCloseConsole;
            @CloseConsole.canceled += instance.OnCloseConsole;
        }

        private void UnregisterCallbacks(IConsoleActions instance)
        {
            @ConfirmInput.started -= instance.OnConfirmInput;
            @ConfirmInput.performed -= instance.OnConfirmInput;
            @ConfirmInput.canceled -= instance.OnConfirmInput;
            @CloseConsole.started -= instance.OnCloseConsole;
            @CloseConsole.performed -= instance.OnCloseConsole;
            @CloseConsole.canceled -= instance.OnCloseConsole;
        }

        public void RemoveCallbacks(IConsoleActions instance)
        {
            if (m_Wrapper.m_ConsoleActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IConsoleActions instance)
        {
            foreach (var item in m_Wrapper.m_ConsoleActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ConsoleActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ConsoleActions @Console => new ConsoleActions(this);

    // WeaponEnhance
    private readonly InputActionMap m_WeaponEnhance;
    private List<IWeaponEnhanceActions> m_WeaponEnhanceActionsCallbackInterfaces = new List<IWeaponEnhanceActions>();
    private readonly InputAction m_WeaponEnhance_CloseWeapDetails;
    public struct WeaponEnhanceActions
    {
        private @PlayerControls m_Wrapper;
        public WeaponEnhanceActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @CloseWeapDetails => m_Wrapper.m_WeaponEnhance_CloseWeapDetails;
        public InputActionMap Get() { return m_Wrapper.m_WeaponEnhance; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(WeaponEnhanceActions set) { return set.Get(); }
        public void AddCallbacks(IWeaponEnhanceActions instance)
        {
            if (instance == null || m_Wrapper.m_WeaponEnhanceActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_WeaponEnhanceActionsCallbackInterfaces.Add(instance);
            @CloseWeapDetails.started += instance.OnCloseWeapDetails;
            @CloseWeapDetails.performed += instance.OnCloseWeapDetails;
            @CloseWeapDetails.canceled += instance.OnCloseWeapDetails;
        }

        private void UnregisterCallbacks(IWeaponEnhanceActions instance)
        {
            @CloseWeapDetails.started -= instance.OnCloseWeapDetails;
            @CloseWeapDetails.performed -= instance.OnCloseWeapDetails;
            @CloseWeapDetails.canceled -= instance.OnCloseWeapDetails;
        }

        public void RemoveCallbacks(IWeaponEnhanceActions instance)
        {
            if (m_Wrapper.m_WeaponEnhanceActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IWeaponEnhanceActions instance)
        {
            foreach (var item in m_Wrapper.m_WeaponEnhanceActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_WeaponEnhanceActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public WeaponEnhanceActions @WeaponEnhance => new WeaponEnhanceActions(this);

    // Shop
    private readonly InputActionMap m_Shop;
    private List<IShopActions> m_ShopActionsCallbackInterfaces = new List<IShopActions>();
    private readonly InputAction m_Shop_CloseShop;
    public struct ShopActions
    {
        private @PlayerControls m_Wrapper;
        public ShopActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @CloseShop => m_Wrapper.m_Shop_CloseShop;
        public InputActionMap Get() { return m_Wrapper.m_Shop; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ShopActions set) { return set.Get(); }
        public void AddCallbacks(IShopActions instance)
        {
            if (instance == null || m_Wrapper.m_ShopActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ShopActionsCallbackInterfaces.Add(instance);
            @CloseShop.started += instance.OnCloseShop;
            @CloseShop.performed += instance.OnCloseShop;
            @CloseShop.canceled += instance.OnCloseShop;
        }

        private void UnregisterCallbacks(IShopActions instance)
        {
            @CloseShop.started -= instance.OnCloseShop;
            @CloseShop.performed -= instance.OnCloseShop;
            @CloseShop.canceled -= instance.OnCloseShop;
        }

        public void RemoveCallbacks(IShopActions instance)
        {
            if (m_Wrapper.m_ShopActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IShopActions instance)
        {
            foreach (var item in m_Wrapper.m_ShopActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ShopActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ShopActions @Shop => new ShopActions(this);

    // ActiveBuffs
    private readonly InputActionMap m_ActiveBuffs;
    private List<IActiveBuffsActions> m_ActiveBuffsActionsCallbackInterfaces = new List<IActiveBuffsActions>();
    private readonly InputAction m_ActiveBuffs_ExitMenu;
    public struct ActiveBuffsActions
    {
        private @PlayerControls m_Wrapper;
        public ActiveBuffsActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @ExitMenu => m_Wrapper.m_ActiveBuffs_ExitMenu;
        public InputActionMap Get() { return m_Wrapper.m_ActiveBuffs; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ActiveBuffsActions set) { return set.Get(); }
        public void AddCallbacks(IActiveBuffsActions instance)
        {
            if (instance == null || m_Wrapper.m_ActiveBuffsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ActiveBuffsActionsCallbackInterfaces.Add(instance);
            @ExitMenu.started += instance.OnExitMenu;
            @ExitMenu.performed += instance.OnExitMenu;
            @ExitMenu.canceled += instance.OnExitMenu;
        }

        private void UnregisterCallbacks(IActiveBuffsActions instance)
        {
            @ExitMenu.started -= instance.OnExitMenu;
            @ExitMenu.performed -= instance.OnExitMenu;
            @ExitMenu.canceled -= instance.OnExitMenu;
        }

        public void RemoveCallbacks(IActiveBuffsActions instance)
        {
            if (m_Wrapper.m_ActiveBuffsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IActiveBuffsActions instance)
        {
            foreach (var item in m_Wrapper.m_ActiveBuffsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ActiveBuffsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ActiveBuffsActions @ActiveBuffs => new ActiveBuffsActions(this);
    public interface IPlayerActions
    {
        void OnLook(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnNormalAttack(InputAction.CallbackContext context);
        void OnChargedAttack(InputAction.CallbackContext context);
        void OnSkill1(InputAction.CallbackContext context);
        void OnSkill2(InputAction.CallbackContext context);
        void OnSkill3(InputAction.CallbackContext context);
        void OnOpenInventory(InputAction.CallbackContext context);
        void OnOpenMap(InputAction.CallbackContext context);
        void OnPressEsc(InputAction.CallbackContext context);
        void OnScrollWheel(InputAction.CallbackContext context);
        void OnOpenConsole(InputAction.CallbackContext context);
    }
    public interface IInventoryActions
    {
        void OnCloseInventory(InputAction.CallbackContext context);
        void OnNextInvPage(InputAction.CallbackContext context);
        void OnPreviousInvPage(InputAction.CallbackContext context);
    }
    public interface IMapActions
    {
        void OnCloseMap(InputAction.CallbackContext context);
    }
    public interface IEscMenuActions
    {
        void OnCloseEscMenu(InputAction.CallbackContext context);
    }
    public interface IDialoguesActions
    {
        void OnContinue(InputAction.CallbackContext context);
    }
    public interface IConsoleActions
    {
        void OnConfirmInput(InputAction.CallbackContext context);
        void OnCloseConsole(InputAction.CallbackContext context);
    }
    public interface IWeaponEnhanceActions
    {
        void OnCloseWeapDetails(InputAction.CallbackContext context);
    }
    public interface IShopActions
    {
        void OnCloseShop(InputAction.CallbackContext context);
    }
    public interface IActiveBuffsActions
    {
        void OnExitMenu(InputAction.CallbackContext context);
    }
}
