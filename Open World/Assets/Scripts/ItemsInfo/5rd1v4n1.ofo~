using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class WeaponInfo : MonoBehaviour
{
    public WeaponScriptableObj SO;

    #region InventoryInfos
    //Top

    public float baseATK;

    // Middle

    public int currentXp;
    public int xpForNextLevel;
    public int currentLevel;
    public int currentMaxLevel;
    public int ascensionLevel;
    public bool isLocked;
    #endregion

    public void Start()
    {
        SetAtkFromLevel();
        XpForLevel(currentLevel++);
    }

    public void SetAtkFromLevel()
    {
        if (currentLevel <= 20 && ascensionLevel == 0)
        {
            baseATK = SO.BaseATK1 + SO.incrementATK * (currentLevel - 1);
        }
        else if (currentLevel >= 20 && currentLevel <= 40 && ascensionLevel == 1)
        {
            baseATK = SO.BaseATK20 + SO.incrementATK * (currentLevel - 20);
        }
        else if (currentLevel >= 40 && currentLevel <= 60 && ascensionLevel == 2)
        {
            baseATK = SO.BaseATK40 + SO.incrementATK * (currentLevel - 40);
        }
        else if (currentLevel >= 60 && currentLevel <= 70 && ascensionLevel == 3)
        {
            baseATK = SO.BaseATK60 + SO.incrementATK * (currentLevel - 60);
        }
        else if (currentLevel >= 70 && currentLevel <= 80 && ascensionLevel == 4)
        {
            baseATK = SO.BaseATK70 + SO.incrementATK * (currentLevel - 70);
        }
        else if (currentLevel >= 80 && currentLevel <= 90 && ascensionLevel == 5)
        {
            baseATK = SO.BaseATK80 + SO.incrementATK * (currentLevel - 80);
        }
        else if (currentLevel >= 90 && currentLevel < 100 && ascensionLevel == 6)
        {
            baseATK = SO.BaseATK90 + SO.incrementATK * (currentLevel - 90);
        }
        else if (currentLevel == 100 && ascensionLevel == 6)
        {
            baseATK = SO.BaseATK100;
        }
    }

    public int XpForLevel(int level) // Xp to get from a level to the next. Parameter level is that next level
    {
        float xp = 5 * Mathf.Pow(level + 20, 2f/3f) + Mathf.Pow(SO.rarity, 2);
        xp *= 10;
        int totXp = Mathf.CeilToInt(xp);
        totXp *= 100;

        return totXp;
    }

    public int Intergral(int x) // Integral function for Xp
    {
        float xp = 3 * Mathf.Pow(x + 20, 5f / 3f) + (SO.rarity * x);
        xp *= 10;
        int totXp = Mathf.CeilToInt(xp);
        totXp *= 100;

        return totXp;
    }

    public int TotXpForLevel(int level) // Total xp to get from level 1 to new level
    {
        int totXp = Intergral(level) - Intergral(1);

        return totXp;
    }

    public int XpToNewLevel(int xpAmount)
    {
        int newLevel = 0;
        int lvl = currentLevel++;

        int currLvlXp = XpForLevel(lvl);

        if (currentXp + xpAmount < currLvlXp)
        {
            return 0;
        }
        else
        {
            while (currentXp + xpAmount >= XpForLevel(lvl))
            {
                lvl++;
            }

            lvl--; // Level that would be reached
            // We have to check that the currentMaxLevel wasnt surpassed
        }

        return newLevel;        
    }

    public void Enhance(int xpAmount)
    {

    }
}
