using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using System;
using Ink.Runtime;
using TMPro;

public class DialogueManager : MonoBehaviour
{
    //public static event Action<Story> OnCreateStory;
	public TextAsset inkJSONAsset1;

	public Story story;

    // UI Prefabs
	[SerializeField]
	private TextMeshProUGUI dialogue;
	[SerializeField]
	private TextMeshProUGUI speakingChar;
	[SerializeField]
	private Transform Answers;
	[SerializeField]
	private GameObject AnswerUIPrefab;

	private bool isWaiting;
	private bool isWritingText;

	void Awake()
	{
		// Remove the default message
		//RemoveChildren();
		//StartStory();		
	}

    void Start()
    {
		isWaiting = true;

		StartStory(inkJSONAsset1);
    }

    // Creates a new Story object with the compiled story which we can then play!
    public void StartStory(TextAsset inkJSONAsset)
	{
		story = new Story(inkJSONAsset.text);

		while (story.canContinue)
		{
			isWaiting = true;
			LoadStoryChunk();
			while (isWaiting) ;
		}
	}

	public void LoadStoryChunk()
    {
		if (story.canContinue)
        {
			string text = story.Continue();

			string[] arr = text.Split('>');

			string charName = arr[0];
			string restText = arr[1];

			speakingChar.text = charName;
			Vector2 dim = new Vector2(speakingChar.preferredWidth + 20f, speakingChar.gameObject.GetComponent<RectTransform>().sizeDelta.y);
			speakingChar.gameObject.GetComponent<RectTransform>().sizeDelta = dim;
			StartCoroutine(TypeText(restText));
        }
    }

	public IEnumerator TypeText(string sentence)
    {
		dialogue.text = "";

        foreach (char c in sentence.ToCharArray())
        {
			if (Input.GetKeyUp(KeyCode.Mouse0) || Input.GetKeyUp(KeyCode.Space))
            {
				dialogue.text = sentence;
				StartCoroutine(WaitForInput());
				StopCoroutine(TypeText(sentence));
			}
			dialogue.text += c;
			yield return new WaitForSeconds(0.05f);
        }

		StartCoroutine(WaitForInput());
    }

	public IEnumerator WaitForInput()
    {
		while (isWaiting)
        {
			if (Input.GetKeyUp(KeyCode.Mouse0) || Input.GetKeyUp(KeyCode.Space))
            {
				isWaiting = false;
            }
			yield return null;
        }
		
		GenerateChoices();
    }

	public void GenerateChoices()
    {
		for (int i = 0; i < story.currentChoices.Count; i++)
		{
			GameObject NewChoice = Instantiate(AnswerUIPrefab, Answers);

			NewChoice.transform.GetChild(3).GetComponent<TextMeshProUGUI>().text = story.currentChoices[i].text;
		}
	}
}
