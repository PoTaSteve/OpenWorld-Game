//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.14.0
//     from Assets/InputSystem/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

/// <summary>
/// Provides programmatic access to <see cref="InputActionAsset" />, <see cref="InputActionMap" />, <see cref="InputAction" /> and <see cref="InputControlScheme" /> instances defined in asset "Assets/InputSystem/PlayerControls.inputactions".
/// </summary>
/// <remarks>
/// This class is source generated and any manual edits will be discarded if the associated asset is reimported or modified.
/// </remarks>
/// <example>
/// <code>
/// using namespace UnityEngine;
/// using UnityEngine.InputSystem;
///
/// // Example of using an InputActionMap named "Player" from a UnityEngine.MonoBehaviour implementing callback interface.
/// public class Example : MonoBehaviour, MyActions.IPlayerActions
/// {
///     private MyActions_Actions m_Actions;                  // Source code representation of asset.
///     private MyActions_Actions.PlayerActions m_Player;     // Source code representation of action map.
///
///     void Awake()
///     {
///         m_Actions = new MyActions_Actions();              // Create asset object.
///         m_Player = m_Actions.Player;                      // Extract action map object.
///         m_Player.AddCallbacks(this);                      // Register callback interface IPlayerActions.
///     }
///
///     void OnDestroy()
///     {
///         m_Actions.Dispose();                              // Destroy asset object.
///     }
///
///     void OnEnable()
///     {
///         m_Player.Enable();                                // Enable all actions within map.
///     }
///
///     void OnDisable()
///     {
///         m_Player.Disable();                               // Disable all actions within map.
///     }
///
///     #region Interface implementation of MyActions.IPlayerActions
///
///     // Invoked when "Move" action is either started, performed or canceled.
///     public void OnMove(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnMove: {context.ReadValue&lt;Vector2&gt;()}");
///     }
///
///     // Invoked when "Attack" action is either started, performed or canceled.
///     public void OnAttack(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnAttack: {context.ReadValue&lt;float&gt;()}");
///     }
///
///     #endregion
/// }
/// </code>
/// </example>
public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    /// <summary>
    /// Provides access to the underlying asset instance.
    /// </summary>
    public InputActionAsset asset { get; }

    /// <summary>
    /// Constructs a new instance.
    /// </summary>
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""DetectController"",
            ""id"": ""3d7b4dab-9a16-44e1-873c-e3c60d14de7a"",
            ""actions"": [
                {
                    ""name"": ""SwitchToController"",
                    ""type"": ""Button"",
                    ""id"": ""0b95d669-8d6a-4811-8478-979310463e04"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0f38da8c-288e-4557-b52d-471781d4c487"",
                    ""path"": ""<Gamepad>/select"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchToController"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Keyboard_Player"",
            ""id"": ""4a564af1-33e2-458e-a006-b7be607df500"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""03ef908d-5c55-4194-b742-837eaffea2be"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Sprint"",
                    ""type"": ""Button"",
                    ""id"": ""ec5d14dd-af54-4cd2-92e8-2be35081fcb3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Crouch"",
                    ""type"": ""Button"",
                    ""id"": ""7dcaf38f-f4b7-4938-b384-b65c06af21f9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""6c1c4b7e-db3e-4302-9812-c1edeabef78d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""873307c7-4a69-4f3a-ae5c-df876844782a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""NormalAttack"",
                    ""type"": ""Button"",
                    ""id"": ""e42038bb-8d9e-427d-a8e7-56332df96fea"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ChargedAttack"",
                    ""type"": ""Button"",
                    ""id"": ""cc737330-f11d-40f3-bfa2-b93c595c970a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Skill0"",
                    ""type"": ""Button"",
                    ""id"": ""8f8dea97-33ff-40b2-bd6b-704d4160e706"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Skill1"",
                    ""type"": ""Button"",
                    ""id"": ""0b9259c4-0db6-4e2c-bb91-1ff77bb0e8aa"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Skill2"",
                    ""type"": ""Button"",
                    ""id"": ""e084417a-fe4d-4893-90c2-46778ba7ac6a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""OpenUIState"",
                    ""type"": ""Button"",
                    ""id"": ""597baf7b-d159-41c8-a41f-adc4396b93ee"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""OpenMap"",
                    ""type"": ""Button"",
                    ""id"": ""87f91229-f34a-47e0-b526-b81948f59b5f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ScrollWheel"",
                    ""type"": ""Value"",
                    ""id"": ""93db456a-9c2b-4a00-9933-b8b5828455c5"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""OpenConsole"",
                    ""type"": ""Button"",
                    ""id"": ""be144f32-6a3e-48f6-ab63-b7cd564893cd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TurnCursorOnOff"",
                    ""type"": ""Button"",
                    ""id"": ""4612f1b2-4c64-4179-97ff-5d1975a980db"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ac829007-0f16-471c-ac06-9312abd68a44"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b2ec0ba7-d3ae-4d31-8648-07174248baf2"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NormalAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""affeedf7-7859-4dcd-8f18-929ad0643a96"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChargedAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cf4c9ab9-aff1-40e7-81bc-f21ee8160940"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Skill0"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4b872cf8-1f95-415d-861e-f9392f550a16"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Skill1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4ad86de2-9b23-4769-b6df-c29249d6f4f6"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Skill2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""32fb6f79-8c04-405f-94fa-b53e017e950c"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OpenUIState"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a036acab-5a8b-46fb-80cd-061605de7655"",
                    ""path"": ""<Keyboard>/m"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OpenMap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""aed8e6dd-6fc5-4cb2-b7f5-5ea6f1f41384"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ScrollWheel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e4cdc78b-0a85-494d-b036-114d7d9dd91f"",
                    ""path"": ""<Keyboard>/t"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OpenConsole"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Movement Vector"",
                    ""id"": ""eec34e89-52a1-4532-8cf3-46f396b54f9e"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""6be80c5f-5568-4abb-ba4f-362c284ac57d"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""4afbf2b2-4a11-4617-9071-047dc1929286"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""a3178a0b-f170-4c1b-a0d9-ea69389d6b31"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""b191a128-f1fa-4a4f-8cc6-94397a429d28"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""b3c1424a-a349-44cb-b1f9-99ddf690ac81"",
                    ""path"": ""<Keyboard>/leftAlt"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TurnCursorOnOff"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3932ebdc-7558-42c3-b567-946dfd2ff367"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d2e0dd9b-cda4-40e1-8c06-32d96f562b3d"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9f22e001-7c89-48e9-8b0d-f637a466a48c"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Keyboard_UIState"",
            ""id"": ""a69e7fd2-ae19-4f46-88f0-b371cbc189ae"",
            ""actions"": [
                {
                    ""name"": ""CloseUIState"",
                    ""type"": ""Button"",
                    ""id"": ""efba7132-dbd4-44ff-be6a-0efb52b0915f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""NextUIState"",
                    ""type"": ""Button"",
                    ""id"": ""97c84907-98fa-4e30-98b4-4b9d6c924498"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PreviousUIState"",
                    ""type"": ""Button"",
                    ""id"": ""516217ae-b83e-44f8-bb84-f5465f6678aa"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c1353aac-6489-472c-9eae-28d8d36bfdca"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CloseUIState"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fa7f3556-06dc-4cdd-8aa7-b61a4fc2ff9f"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NextUIState"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a7773b7a-e803-46bb-9541-cdb741c0e6da"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PreviousUIState"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Keyboard_QuestsUI"",
            ""id"": ""00c4bcd3-df7a-45f8-9d2b-d05e5c57f702"",
            ""actions"": [
                {
                    ""name"": ""NextQuestPage"",
                    ""type"": ""Button"",
                    ""id"": ""30b10678-cd4e-4d05-9f24-2ce4c4ca44e8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PreviousQuestPage"",
                    ""type"": ""Button"",
                    ""id"": ""98f68fe4-b04d-45fb-86bd-6668dd1b880b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c09b429f-f8cb-47a1-8e7e-a3d8d86b82d6"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NextQuestPage"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""705bd6d4-1e32-4b64-a517-7e52b721bbf2"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PreviousQuestPage"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Keyboard_InventoryUI"",
            ""id"": ""f7bb0cba-b8b8-45d9-b5f5-2e35b64b2c80"",
            ""actions"": [
                {
                    ""name"": ""NextInventoryPage"",
                    ""type"": ""Button"",
                    ""id"": ""2c3f63a5-0bf2-4b29-8a9e-21778d7fbc54"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PreviousInventoryPage"",
                    ""type"": ""Button"",
                    ""id"": ""92cb5b88-6c9d-46d3-b4e8-94ae995c75d3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""NextInventorySlot"",
                    ""type"": ""Button"",
                    ""id"": ""2c2fea9c-12a1-4429-be56-fc77ded5f884"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PreviousInventorySlot"",
                    ""type"": ""Button"",
                    ""id"": ""e694b1fa-9e7c-41f7-831b-c447a0f9c5a5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Shift + D"",
                    ""id"": ""21538f1c-a92b-4cf2-845d-1a08436462f3"",
                    ""path"": ""ButtonWithOneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NextInventoryPage"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Modifier"",
                    ""id"": ""40b8af05-76b8-42c0-aa11-f6672aa7d3c3"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NextInventoryPage"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Button"",
                    ""id"": ""0594d8c1-861f-4554-bc09-a8417b24da75"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NextInventoryPage"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Shift + A"",
                    ""id"": ""d1e7ca01-654a-4b7a-bf3f-2658c6bbfc2f"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PreviousInventoryPage"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""93fdc795-31ed-4853-9210-9bf7fa9ad66e"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PreviousInventoryPage"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""be2d2d08-40ad-4f5a-a93b-7305ec44cd38"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PreviousInventoryPage"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""b28f98ea-5e39-4983-9887-450df40714c7"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NextInventorySlot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1f48d3f0-3a82-4c39-8593-08b38f6a657c"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PreviousInventorySlot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Keyboard_EquipmentUI"",
            ""id"": ""0e636c72-4ea3-4330-b8e9-0195a3052af8"",
            ""actions"": [
                {
                    ""name"": ""NextInventoryPage"",
                    ""type"": ""Button"",
                    ""id"": ""f618dd64-1871-49e1-87e9-730c24559d3d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PreviousInventoryPage"",
                    ""type"": ""Button"",
                    ""id"": ""4fa9fc02-602e-4eab-b137-92d58edabe07"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""NextInventorySlot"",
                    ""type"": ""Button"",
                    ""id"": ""721a3d3a-d127-4ef8-b782-db788b61a3ee"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PreviousInventorySlot"",
                    ""type"": ""Button"",
                    ""id"": ""4f7a9e59-4c0f-4ae8-a5c9-a37b2ea94f02"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Shift + D"",
                    ""id"": ""3df7f6d8-0992-4be1-a1dd-97bc50279efd"",
                    ""path"": ""ButtonWithOneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NextInventoryPage"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Modifier"",
                    ""id"": ""5aca17de-b47d-4226-822e-a63b89801e3f"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NextInventoryPage"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Button"",
                    ""id"": ""3895ca41-e849-4c33-98ad-243ce9bab7a3"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NextInventoryPage"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Shift + A"",
                    ""id"": ""95ef2f96-f079-4401-96a2-71a36d78f8ca"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PreviousInventoryPage"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""7fcbf2a4-1aac-4499-9e6f-49aad54c932f"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PreviousInventoryPage"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""2560069d-4456-4e2c-95a9-a1208d9698d5"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PreviousInventoryPage"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""e8d61968-53a8-4748-818e-19210fe04e0c"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NextInventorySlot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4779d8ae-b78f-4443-9706-4f6e72f8768e"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PreviousInventorySlot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Keyboard_SystemUI"",
            ""id"": ""cb0f173f-6a57-46a7-b535-3f20ca597c4b"",
            ""actions"": [],
            ""bindings"": []
        },
        {
            ""name"": ""Keyboard_Map"",
            ""id"": ""e7bca92f-9ffa-4fa7-953f-f5f43d19f4e0"",
            ""actions"": [
                {
                    ""name"": ""CloseMap"",
                    ""type"": ""Button"",
                    ""id"": ""fbb65485-f709-46f4-b05c-5fb46ce782ce"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""60080c22-268a-4782-807f-0e129905388c"",
                    ""path"": ""<Keyboard>/m"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CloseMap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b48bc132-3d7a-4b64-bb00-3783aa3a1a39"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CloseMap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Keyboard_Dialogues"",
            ""id"": ""13693169-fd64-4564-8cb3-22f3f1eaf564"",
            ""actions"": [
                {
                    ""name"": ""Continue"",
                    ""type"": ""Button"",
                    ""id"": ""8f338682-d054-4015-bdd1-e1abfb8c4b8f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""45d51a7b-f33d-42dc-9eeb-100fc6e623fc"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Continue"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2e76799b-ed76-4fcc-ad24-ca380db3bf78"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Continue"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2c3eeb8c-021d-4d44-9602-268ceb191ae4"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Continue"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Keyboard_Shop"",
            ""id"": ""564fdde7-9f9e-4373-9fde-06e56d97f720"",
            ""actions"": [
                {
                    ""name"": ""CloseShop"",
                    ""type"": ""Button"",
                    ""id"": ""c1f86ba7-376b-4482-bdff-b93eaab5c9a2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6a4cc679-c675-4c67-bf86-082b26262723"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CloseShop"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Keyboard_Console"",
            ""id"": ""603d602c-3204-4ceb-b793-f08323fdb08b"",
            ""actions"": [
                {
                    ""name"": ""ConfirmInput"",
                    ""type"": ""Button"",
                    ""id"": ""e450c977-14c3-4b57-a5dc-fd84e9142756"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CloseConsole"",
                    ""type"": ""Button"",
                    ""id"": ""90cfe7cb-ed01-4d4f-b64b-61ae7bbe2ae7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8bb25595-3d85-4868-8009-b6f4f2305ab0"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ConfirmInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""151aa0e2-aa5d-4c4e-ac2c-4039ddaec257"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CloseConsole"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""DetectMouseKeyboard"",
            ""id"": ""ae661767-e254-4da3-9999-39bf7fc4db5b"",
            ""actions"": [
                {
                    ""name"": ""SwitchToMouseKeyboard"",
                    ""type"": ""Button"",
                    ""id"": ""14835348-2b9e-4de8-9709-5104547a625f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9f8b9dcc-b4a1-42e3-a427-71d448b1ef8e"",
                    ""path"": ""<Keyboard>/anyKey"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchToMouseKeyboard"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e6ba3f10-3dee-456b-94b8-e00745e50769"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchToMouseKeyboard"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""27a99052-00d2-412c-b799-06a5c5ce135e"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchToMouseKeyboard"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Controller_Player"",
            ""id"": ""2fc45983-dc37-4c5c-a0e0-57fd16967340"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""c6e6fc32-c8e6-4c57-8cf3-c6153cd97179"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Sprint"",
                    ""type"": ""Button"",
                    ""id"": ""b556d614-f604-4968-8421-7dcc1297bac8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Crouch"",
                    ""type"": ""Button"",
                    ""id"": ""6913e2b1-084e-41b8-b7fe-48257d77678b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""80a6030e-e165-40fb-bb1b-c3ee44703bcf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""73b0be61-67d6-4ef2-9ab4-92474b1871b3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""NormalAttack"",
                    ""type"": ""Button"",
                    ""id"": ""11aec436-7c51-4629-a058-95a13671bddd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ChargedAttack"",
                    ""type"": ""Button"",
                    ""id"": ""b2d93d02-c679-413f-a3a5-6597bc7fb1a0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Skill1"",
                    ""type"": ""Button"",
                    ""id"": ""f4f71594-8692-47d8-a2af-8bb68f062e4a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Skill2"",
                    ""type"": ""Button"",
                    ""id"": ""3de52dbc-5553-41ef-9500-0fe838355613"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Skill3"",
                    ""type"": ""Button"",
                    ""id"": ""0fe2581e-4e60-49b7-b3c0-841affe1607a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""OpenUIState"",
                    ""type"": ""Button"",
                    ""id"": ""b702d435-844d-49b3-827c-2d3501d67602"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""OpenMap"",
                    ""type"": ""Button"",
                    ""id"": ""de918ea6-712b-452c-b84e-ef6723d300b4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2c2b914b-0061-4976-80a1-eff9be4377f3"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NormalAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1a1790e4-110c-4548-8f66-2dfec3d9e401"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChargedAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c3fd37e1-1b1b-4991-a5c8-c681a333c67a"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Skill1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b97e0662-7c0d-443b-b2c3-7418e8796d86"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Skill2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3e2738c7-8c5c-42f1-91d5-840807d06ffe"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Skill3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d85eaaac-8baa-4fd1-8dfa-60441bb561da"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OpenUIState"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b8624210-6247-4a6b-b386-fd090915d387"",
                    ""path"": ""<Gamepad>/select"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OpenMap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1dbc5575-1757-4f8e-8a09-b53e1efb0634"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f93ba4e3-676d-4a4f-9101-3aaa21781775"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Movement Vector"",
                    ""id"": ""9f495284-8795-40cc-95f8-db0ebc21c3f7"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""e21fbad3-ded5-47a0-89d7-5c50b69faa01"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""3a0f9b5a-a0ab-46a7-8ade-f64e4ba3b510"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""3d4612f6-7204-4db0-b862-41cd080abeb7"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""820f1735-76e5-454b-9d42-936da698a9aa"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""da3354de-971f-4beb-ad92-316425e816b5"",
                    ""path"": ""<Gamepad>/leftStickPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3bc0282e-cc0e-4b06-a9c7-662217425665"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Controller_UIState"",
            ""id"": ""ec154cb4-8401-4aef-9c83-2024e1e4a501"",
            ""actions"": [
                {
                    ""name"": ""CloseUIState"",
                    ""type"": ""Button"",
                    ""id"": ""f8792d96-75cc-4fea-b236-50d8b60ff9ec"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""NextUIState"",
                    ""type"": ""Button"",
                    ""id"": ""14f45db4-6ca0-466f-a3ee-e5b1c71a1763"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PreviousUIState"",
                    ""type"": ""Button"",
                    ""id"": ""dcd7c7cf-aa65-4e59-b488-84b2147c630c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e06bdcd8-6946-4df7-8e72-5cd46d7e6caa"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CloseUIState"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""35a6f333-e0a9-4ad4-98d8-1170140dd3b4"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NextUIState"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1508c544-4295-4c81-8852-460e8de97a58"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PreviousUIState"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Controller_QuestsUI"",
            ""id"": ""d52996d4-3996-40b1-a9e6-4784d073ca86"",
            ""actions"": [
                {
                    ""name"": ""NextQuestPage"",
                    ""type"": ""Button"",
                    ""id"": ""b865ccf1-3f99-4a60-bf6f-2b93f8b1c182"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PreviousQuestPage"",
                    ""type"": ""Button"",
                    ""id"": ""db8b74fa-7352-40ef-b9d9-b048b6acaf48"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""096fc47b-af21-4b3e-a4fd-7c06945ebd9b"",
                    ""path"": ""<Gamepad>/rightStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NextQuestPage"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f93d2e22-cd88-4813-97c9-409ff1d8d7fd"",
                    ""path"": ""<Gamepad>/rightStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PreviousQuestPage"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Controller_InventoryUI"",
            ""id"": ""bd6ea2e8-58b1-4d96-a53d-5e7a40270477"",
            ""actions"": [
                {
                    ""name"": ""NextInventoryPage"",
                    ""type"": ""Button"",
                    ""id"": ""eef172ad-c9eb-47b3-a790-92a56a8e239c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PreviousInventoryPage"",
                    ""type"": ""Button"",
                    ""id"": ""ca41889a-683a-4594-8f2b-c694256ed482"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ca323a21-7580-4ff7-9b14-5eea2cf36a40"",
                    ""path"": ""<Gamepad>/rightStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NextInventoryPage"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fcc9939d-7897-4dd3-89e2-f042446ab918"",
                    ""path"": ""<Gamepad>/rightStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PreviousInventoryPage"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Controller_EquipmentUI"",
            ""id"": ""7d238661-9f19-40ef-96ac-24c178101bf4"",
            ""actions"": [],
            ""bindings"": []
        },
        {
            ""name"": ""Controller_SystemUI"",
            ""id"": ""c80bbab0-bd5d-467d-913a-548a8ac33113"",
            ""actions"": [],
            ""bindings"": []
        },
        {
            ""name"": ""Controller_Map"",
            ""id"": ""8c2dca32-e59c-42a5-b1d4-9730ea6adbc6"",
            ""actions"": [
                {
                    ""name"": ""CloseMap"",
                    ""type"": ""Button"",
                    ""id"": ""f73c7e37-a359-4d3a-be8c-13448a4aa58b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""85ede2f1-62fa-480d-8ca1-68a333b6e41d"",
                    ""path"": ""<Gamepad>/select"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CloseMap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""56e37297-1f1a-4bb4-a73f-0d6a41d69b3a"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CloseMap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Controller_Dialogues"",
            ""id"": ""daf48a4c-dab6-4850-9586-e247e90836df"",
            ""actions"": [
                {
                    ""name"": ""Continue"",
                    ""type"": ""Button"",
                    ""id"": ""15703b2b-a445-447d-b228-87140e56fd99"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""381bc264-6c61-410e-ade4-88a8400601be"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Continue"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9655f316-cf16-4ba7-bff1-7d243c338f1d"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Continue"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Controller_Shop"",
            ""id"": ""5b55e026-680e-4b43-9adc-81bd544de395"",
            ""actions"": [
                {
                    ""name"": ""CloseShop"",
                    ""type"": ""Button"",
                    ""id"": ""d11dc8d4-0109-434d-8a34-e6ba8f5aab51"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e48ffa43-160e-418d-baa5-3d0bfaf39893"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CloseShop"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // DetectController
        m_DetectController = asset.FindActionMap("DetectController", throwIfNotFound: true);
        m_DetectController_SwitchToController = m_DetectController.FindAction("SwitchToController", throwIfNotFound: true);
        // Keyboard_Player
        m_Keyboard_Player = asset.FindActionMap("Keyboard_Player", throwIfNotFound: true);
        m_Keyboard_Player_Movement = m_Keyboard_Player.FindAction("Movement", throwIfNotFound: true);
        m_Keyboard_Player_Sprint = m_Keyboard_Player.FindAction("Sprint", throwIfNotFound: true);
        m_Keyboard_Player_Crouch = m_Keyboard_Player.FindAction("Crouch", throwIfNotFound: true);
        m_Keyboard_Player_Jump = m_Keyboard_Player.FindAction("Jump", throwIfNotFound: true);
        m_Keyboard_Player_Interact = m_Keyboard_Player.FindAction("Interact", throwIfNotFound: true);
        m_Keyboard_Player_NormalAttack = m_Keyboard_Player.FindAction("NormalAttack", throwIfNotFound: true);
        m_Keyboard_Player_ChargedAttack = m_Keyboard_Player.FindAction("ChargedAttack", throwIfNotFound: true);
        m_Keyboard_Player_Skill0 = m_Keyboard_Player.FindAction("Skill0", throwIfNotFound: true);
        m_Keyboard_Player_Skill1 = m_Keyboard_Player.FindAction("Skill1", throwIfNotFound: true);
        m_Keyboard_Player_Skill2 = m_Keyboard_Player.FindAction("Skill2", throwIfNotFound: true);
        m_Keyboard_Player_OpenUIState = m_Keyboard_Player.FindAction("OpenUIState", throwIfNotFound: true);
        m_Keyboard_Player_OpenMap = m_Keyboard_Player.FindAction("OpenMap", throwIfNotFound: true);
        m_Keyboard_Player_ScrollWheel = m_Keyboard_Player.FindAction("ScrollWheel", throwIfNotFound: true);
        m_Keyboard_Player_OpenConsole = m_Keyboard_Player.FindAction("OpenConsole", throwIfNotFound: true);
        m_Keyboard_Player_TurnCursorOnOff = m_Keyboard_Player.FindAction("TurnCursorOnOff", throwIfNotFound: true);
        // Keyboard_UIState
        m_Keyboard_UIState = asset.FindActionMap("Keyboard_UIState", throwIfNotFound: true);
        m_Keyboard_UIState_CloseUIState = m_Keyboard_UIState.FindAction("CloseUIState", throwIfNotFound: true);
        m_Keyboard_UIState_NextUIState = m_Keyboard_UIState.FindAction("NextUIState", throwIfNotFound: true);
        m_Keyboard_UIState_PreviousUIState = m_Keyboard_UIState.FindAction("PreviousUIState", throwIfNotFound: true);
        // Keyboard_QuestsUI
        m_Keyboard_QuestsUI = asset.FindActionMap("Keyboard_QuestsUI", throwIfNotFound: true);
        m_Keyboard_QuestsUI_NextQuestPage = m_Keyboard_QuestsUI.FindAction("NextQuestPage", throwIfNotFound: true);
        m_Keyboard_QuestsUI_PreviousQuestPage = m_Keyboard_QuestsUI.FindAction("PreviousQuestPage", throwIfNotFound: true);
        // Keyboard_InventoryUI
        m_Keyboard_InventoryUI = asset.FindActionMap("Keyboard_InventoryUI", throwIfNotFound: true);
        m_Keyboard_InventoryUI_NextInventoryPage = m_Keyboard_InventoryUI.FindAction("NextInventoryPage", throwIfNotFound: true);
        m_Keyboard_InventoryUI_PreviousInventoryPage = m_Keyboard_InventoryUI.FindAction("PreviousInventoryPage", throwIfNotFound: true);
        m_Keyboard_InventoryUI_NextInventorySlot = m_Keyboard_InventoryUI.FindAction("NextInventorySlot", throwIfNotFound: true);
        m_Keyboard_InventoryUI_PreviousInventorySlot = m_Keyboard_InventoryUI.FindAction("PreviousInventorySlot", throwIfNotFound: true);
        // Keyboard_EquipmentUI
        m_Keyboard_EquipmentUI = asset.FindActionMap("Keyboard_EquipmentUI", throwIfNotFound: true);
        m_Keyboard_EquipmentUI_NextInventoryPage = m_Keyboard_EquipmentUI.FindAction("NextInventoryPage", throwIfNotFound: true);
        m_Keyboard_EquipmentUI_PreviousInventoryPage = m_Keyboard_EquipmentUI.FindAction("PreviousInventoryPage", throwIfNotFound: true);
        m_Keyboard_EquipmentUI_NextInventorySlot = m_Keyboard_EquipmentUI.FindAction("NextInventorySlot", throwIfNotFound: true);
        m_Keyboard_EquipmentUI_PreviousInventorySlot = m_Keyboard_EquipmentUI.FindAction("PreviousInventorySlot", throwIfNotFound: true);
        // Keyboard_SystemUI
        m_Keyboard_SystemUI = asset.FindActionMap("Keyboard_SystemUI", throwIfNotFound: true);
        // Keyboard_Map
        m_Keyboard_Map = asset.FindActionMap("Keyboard_Map", throwIfNotFound: true);
        m_Keyboard_Map_CloseMap = m_Keyboard_Map.FindAction("CloseMap", throwIfNotFound: true);
        // Keyboard_Dialogues
        m_Keyboard_Dialogues = asset.FindActionMap("Keyboard_Dialogues", throwIfNotFound: true);
        m_Keyboard_Dialogues_Continue = m_Keyboard_Dialogues.FindAction("Continue", throwIfNotFound: true);
        // Keyboard_Shop
        m_Keyboard_Shop = asset.FindActionMap("Keyboard_Shop", throwIfNotFound: true);
        m_Keyboard_Shop_CloseShop = m_Keyboard_Shop.FindAction("CloseShop", throwIfNotFound: true);
        // Keyboard_Console
        m_Keyboard_Console = asset.FindActionMap("Keyboard_Console", throwIfNotFound: true);
        m_Keyboard_Console_ConfirmInput = m_Keyboard_Console.FindAction("ConfirmInput", throwIfNotFound: true);
        m_Keyboard_Console_CloseConsole = m_Keyboard_Console.FindAction("CloseConsole", throwIfNotFound: true);
        // DetectMouseKeyboard
        m_DetectMouseKeyboard = asset.FindActionMap("DetectMouseKeyboard", throwIfNotFound: true);
        m_DetectMouseKeyboard_SwitchToMouseKeyboard = m_DetectMouseKeyboard.FindAction("SwitchToMouseKeyboard", throwIfNotFound: true);
        // Controller_Player
        m_Controller_Player = asset.FindActionMap("Controller_Player", throwIfNotFound: true);
        m_Controller_Player_Movement = m_Controller_Player.FindAction("Movement", throwIfNotFound: true);
        m_Controller_Player_Sprint = m_Controller_Player.FindAction("Sprint", throwIfNotFound: true);
        m_Controller_Player_Crouch = m_Controller_Player.FindAction("Crouch", throwIfNotFound: true);
        m_Controller_Player_Jump = m_Controller_Player.FindAction("Jump", throwIfNotFound: true);
        m_Controller_Player_Interact = m_Controller_Player.FindAction("Interact", throwIfNotFound: true);
        m_Controller_Player_NormalAttack = m_Controller_Player.FindAction("NormalAttack", throwIfNotFound: true);
        m_Controller_Player_ChargedAttack = m_Controller_Player.FindAction("ChargedAttack", throwIfNotFound: true);
        m_Controller_Player_Skill1 = m_Controller_Player.FindAction("Skill1", throwIfNotFound: true);
        m_Controller_Player_Skill2 = m_Controller_Player.FindAction("Skill2", throwIfNotFound: true);
        m_Controller_Player_Skill3 = m_Controller_Player.FindAction("Skill3", throwIfNotFound: true);
        m_Controller_Player_OpenUIState = m_Controller_Player.FindAction("OpenUIState", throwIfNotFound: true);
        m_Controller_Player_OpenMap = m_Controller_Player.FindAction("OpenMap", throwIfNotFound: true);
        // Controller_UIState
        m_Controller_UIState = asset.FindActionMap("Controller_UIState", throwIfNotFound: true);
        m_Controller_UIState_CloseUIState = m_Controller_UIState.FindAction("CloseUIState", throwIfNotFound: true);
        m_Controller_UIState_NextUIState = m_Controller_UIState.FindAction("NextUIState", throwIfNotFound: true);
        m_Controller_UIState_PreviousUIState = m_Controller_UIState.FindAction("PreviousUIState", throwIfNotFound: true);
        // Controller_QuestsUI
        m_Controller_QuestsUI = asset.FindActionMap("Controller_QuestsUI", throwIfNotFound: true);
        m_Controller_QuestsUI_NextQuestPage = m_Controller_QuestsUI.FindAction("NextQuestPage", throwIfNotFound: true);
        m_Controller_QuestsUI_PreviousQuestPage = m_Controller_QuestsUI.FindAction("PreviousQuestPage", throwIfNotFound: true);
        // Controller_InventoryUI
        m_Controller_InventoryUI = asset.FindActionMap("Controller_InventoryUI", throwIfNotFound: true);
        m_Controller_InventoryUI_NextInventoryPage = m_Controller_InventoryUI.FindAction("NextInventoryPage", throwIfNotFound: true);
        m_Controller_InventoryUI_PreviousInventoryPage = m_Controller_InventoryUI.FindAction("PreviousInventoryPage", throwIfNotFound: true);
        // Controller_EquipmentUI
        m_Controller_EquipmentUI = asset.FindActionMap("Controller_EquipmentUI", throwIfNotFound: true);
        // Controller_SystemUI
        m_Controller_SystemUI = asset.FindActionMap("Controller_SystemUI", throwIfNotFound: true);
        // Controller_Map
        m_Controller_Map = asset.FindActionMap("Controller_Map", throwIfNotFound: true);
        m_Controller_Map_CloseMap = m_Controller_Map.FindAction("CloseMap", throwIfNotFound: true);
        // Controller_Dialogues
        m_Controller_Dialogues = asset.FindActionMap("Controller_Dialogues", throwIfNotFound: true);
        m_Controller_Dialogues_Continue = m_Controller_Dialogues.FindAction("Continue", throwIfNotFound: true);
        // Controller_Shop
        m_Controller_Shop = asset.FindActionMap("Controller_Shop", throwIfNotFound: true);
        m_Controller_Shop_CloseShop = m_Controller_Shop.FindAction("CloseShop", throwIfNotFound: true);
    }

    ~@PlayerControls()
    {
        UnityEngine.Debug.Assert(!m_DetectController.enabled, "This will cause a leak and performance issues, PlayerControls.DetectController.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Keyboard_Player.enabled, "This will cause a leak and performance issues, PlayerControls.Keyboard_Player.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Keyboard_UIState.enabled, "This will cause a leak and performance issues, PlayerControls.Keyboard_UIState.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Keyboard_QuestsUI.enabled, "This will cause a leak and performance issues, PlayerControls.Keyboard_QuestsUI.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Keyboard_InventoryUI.enabled, "This will cause a leak and performance issues, PlayerControls.Keyboard_InventoryUI.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Keyboard_EquipmentUI.enabled, "This will cause a leak and performance issues, PlayerControls.Keyboard_EquipmentUI.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Keyboard_SystemUI.enabled, "This will cause a leak and performance issues, PlayerControls.Keyboard_SystemUI.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Keyboard_Map.enabled, "This will cause a leak and performance issues, PlayerControls.Keyboard_Map.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Keyboard_Dialogues.enabled, "This will cause a leak and performance issues, PlayerControls.Keyboard_Dialogues.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Keyboard_Shop.enabled, "This will cause a leak and performance issues, PlayerControls.Keyboard_Shop.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Keyboard_Console.enabled, "This will cause a leak and performance issues, PlayerControls.Keyboard_Console.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_DetectMouseKeyboard.enabled, "This will cause a leak and performance issues, PlayerControls.DetectMouseKeyboard.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Controller_Player.enabled, "This will cause a leak and performance issues, PlayerControls.Controller_Player.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Controller_UIState.enabled, "This will cause a leak and performance issues, PlayerControls.Controller_UIState.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Controller_QuestsUI.enabled, "This will cause a leak and performance issues, PlayerControls.Controller_QuestsUI.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Controller_InventoryUI.enabled, "This will cause a leak and performance issues, PlayerControls.Controller_InventoryUI.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Controller_EquipmentUI.enabled, "This will cause a leak and performance issues, PlayerControls.Controller_EquipmentUI.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Controller_SystemUI.enabled, "This will cause a leak and performance issues, PlayerControls.Controller_SystemUI.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Controller_Map.enabled, "This will cause a leak and performance issues, PlayerControls.Controller_Map.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Controller_Dialogues.enabled, "This will cause a leak and performance issues, PlayerControls.Controller_Dialogues.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Controller_Shop.enabled, "This will cause a leak and performance issues, PlayerControls.Controller_Shop.Disable() has not been called.");
    }

    /// <summary>
    /// Destroys this asset and all associated <see cref="InputAction"/> instances.
    /// </summary>
    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindingMask" />
    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.devices" />
    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.controlSchemes" />
    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Contains(InputAction)" />
    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.GetEnumerator()" />
    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    /// <inheritdoc cref="IEnumerable.GetEnumerator()" />
    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Enable()" />
    public void Enable()
    {
        asset.Enable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Disable()" />
    public void Disable()
    {
        asset.Disable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindings" />
    public IEnumerable<InputBinding> bindings => asset.bindings;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindAction(string, bool)" />
    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindBinding(InputBinding, out InputAction)" />
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // DetectController
    private readonly InputActionMap m_DetectController;
    private List<IDetectControllerActions> m_DetectControllerActionsCallbackInterfaces = new List<IDetectControllerActions>();
    private readonly InputAction m_DetectController_SwitchToController;
    /// <summary>
    /// Provides access to input actions defined in input action map "DetectController".
    /// </summary>
    public struct DetectControllerActions
    {
        private @PlayerControls m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public DetectControllerActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "DetectController/SwitchToController".
        /// </summary>
        public InputAction @SwitchToController => m_Wrapper.m_DetectController_SwitchToController;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_DetectController; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="DetectControllerActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(DetectControllerActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="DetectControllerActions" />
        public void AddCallbacks(IDetectControllerActions instance)
        {
            if (instance == null || m_Wrapper.m_DetectControllerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DetectControllerActionsCallbackInterfaces.Add(instance);
            @SwitchToController.started += instance.OnSwitchToController;
            @SwitchToController.performed += instance.OnSwitchToController;
            @SwitchToController.canceled += instance.OnSwitchToController;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="DetectControllerActions" />
        private void UnregisterCallbacks(IDetectControllerActions instance)
        {
            @SwitchToController.started -= instance.OnSwitchToController;
            @SwitchToController.performed -= instance.OnSwitchToController;
            @SwitchToController.canceled -= instance.OnSwitchToController;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="DetectControllerActions.UnregisterCallbacks(IDetectControllerActions)" />.
        /// </summary>
        /// <seealso cref="DetectControllerActions.UnregisterCallbacks(IDetectControllerActions)" />
        public void RemoveCallbacks(IDetectControllerActions instance)
        {
            if (m_Wrapper.m_DetectControllerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="DetectControllerActions.AddCallbacks(IDetectControllerActions)" />
        /// <seealso cref="DetectControllerActions.RemoveCallbacks(IDetectControllerActions)" />
        /// <seealso cref="DetectControllerActions.UnregisterCallbacks(IDetectControllerActions)" />
        public void SetCallbacks(IDetectControllerActions instance)
        {
            foreach (var item in m_Wrapper.m_DetectControllerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DetectControllerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="DetectControllerActions" /> instance referencing this action map.
    /// </summary>
    public DetectControllerActions @DetectController => new DetectControllerActions(this);

    // Keyboard_Player
    private readonly InputActionMap m_Keyboard_Player;
    private List<IKeyboard_PlayerActions> m_Keyboard_PlayerActionsCallbackInterfaces = new List<IKeyboard_PlayerActions>();
    private readonly InputAction m_Keyboard_Player_Movement;
    private readonly InputAction m_Keyboard_Player_Sprint;
    private readonly InputAction m_Keyboard_Player_Crouch;
    private readonly InputAction m_Keyboard_Player_Jump;
    private readonly InputAction m_Keyboard_Player_Interact;
    private readonly InputAction m_Keyboard_Player_NormalAttack;
    private readonly InputAction m_Keyboard_Player_ChargedAttack;
    private readonly InputAction m_Keyboard_Player_Skill0;
    private readonly InputAction m_Keyboard_Player_Skill1;
    private readonly InputAction m_Keyboard_Player_Skill2;
    private readonly InputAction m_Keyboard_Player_OpenUIState;
    private readonly InputAction m_Keyboard_Player_OpenMap;
    private readonly InputAction m_Keyboard_Player_ScrollWheel;
    private readonly InputAction m_Keyboard_Player_OpenConsole;
    private readonly InputAction m_Keyboard_Player_TurnCursorOnOff;
    /// <summary>
    /// Provides access to input actions defined in input action map "Keyboard_Player".
    /// </summary>
    public struct Keyboard_PlayerActions
    {
        private @PlayerControls m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public Keyboard_PlayerActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "Keyboard_Player/Movement".
        /// </summary>
        public InputAction @Movement => m_Wrapper.m_Keyboard_Player_Movement;
        /// <summary>
        /// Provides access to the underlying input action "Keyboard_Player/Sprint".
        /// </summary>
        public InputAction @Sprint => m_Wrapper.m_Keyboard_Player_Sprint;
        /// <summary>
        /// Provides access to the underlying input action "Keyboard_Player/Crouch".
        /// </summary>
        public InputAction @Crouch => m_Wrapper.m_Keyboard_Player_Crouch;
        /// <summary>
        /// Provides access to the underlying input action "Keyboard_Player/Jump".
        /// </summary>
        public InputAction @Jump => m_Wrapper.m_Keyboard_Player_Jump;
        /// <summary>
        /// Provides access to the underlying input action "Keyboard_Player/Interact".
        /// </summary>
        public InputAction @Interact => m_Wrapper.m_Keyboard_Player_Interact;
        /// <summary>
        /// Provides access to the underlying input action "Keyboard_Player/NormalAttack".
        /// </summary>
        public InputAction @NormalAttack => m_Wrapper.m_Keyboard_Player_NormalAttack;
        /// <summary>
        /// Provides access to the underlying input action "Keyboard_Player/ChargedAttack".
        /// </summary>
        public InputAction @ChargedAttack => m_Wrapper.m_Keyboard_Player_ChargedAttack;
        /// <summary>
        /// Provides access to the underlying input action "Keyboard_Player/Skill0".
        /// </summary>
        public InputAction @Skill0 => m_Wrapper.m_Keyboard_Player_Skill0;
        /// <summary>
        /// Provides access to the underlying input action "Keyboard_Player/Skill1".
        /// </summary>
        public InputAction @Skill1 => m_Wrapper.m_Keyboard_Player_Skill1;
        /// <summary>
        /// Provides access to the underlying input action "Keyboard_Player/Skill2".
        /// </summary>
        public InputAction @Skill2 => m_Wrapper.m_Keyboard_Player_Skill2;
        /// <summary>
        /// Provides access to the underlying input action "Keyboard_Player/OpenUIState".
        /// </summary>
        public InputAction @OpenUIState => m_Wrapper.m_Keyboard_Player_OpenUIState;
        /// <summary>
        /// Provides access to the underlying input action "Keyboard_Player/OpenMap".
        /// </summary>
        public InputAction @OpenMap => m_Wrapper.m_Keyboard_Player_OpenMap;
        /// <summary>
        /// Provides access to the underlying input action "Keyboard_Player/ScrollWheel".
        /// </summary>
        public InputAction @ScrollWheel => m_Wrapper.m_Keyboard_Player_ScrollWheel;
        /// <summary>
        /// Provides access to the underlying input action "Keyboard_Player/OpenConsole".
        /// </summary>
        public InputAction @OpenConsole => m_Wrapper.m_Keyboard_Player_OpenConsole;
        /// <summary>
        /// Provides access to the underlying input action "Keyboard_Player/TurnCursorOnOff".
        /// </summary>
        public InputAction @TurnCursorOnOff => m_Wrapper.m_Keyboard_Player_TurnCursorOnOff;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_Keyboard_Player; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="Keyboard_PlayerActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(Keyboard_PlayerActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="Keyboard_PlayerActions" />
        public void AddCallbacks(IKeyboard_PlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_Keyboard_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Keyboard_PlayerActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Sprint.started += instance.OnSprint;
            @Sprint.performed += instance.OnSprint;
            @Sprint.canceled += instance.OnSprint;
            @Crouch.started += instance.OnCrouch;
            @Crouch.performed += instance.OnCrouch;
            @Crouch.canceled += instance.OnCrouch;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
            @NormalAttack.started += instance.OnNormalAttack;
            @NormalAttack.performed += instance.OnNormalAttack;
            @NormalAttack.canceled += instance.OnNormalAttack;
            @ChargedAttack.started += instance.OnChargedAttack;
            @ChargedAttack.performed += instance.OnChargedAttack;
            @ChargedAttack.canceled += instance.OnChargedAttack;
            @Skill0.started += instance.OnSkill0;
            @Skill0.performed += instance.OnSkill0;
            @Skill0.canceled += instance.OnSkill0;
            @Skill1.started += instance.OnSkill1;
            @Skill1.performed += instance.OnSkill1;
            @Skill1.canceled += instance.OnSkill1;
            @Skill2.started += instance.OnSkill2;
            @Skill2.performed += instance.OnSkill2;
            @Skill2.canceled += instance.OnSkill2;
            @OpenUIState.started += instance.OnOpenUIState;
            @OpenUIState.performed += instance.OnOpenUIState;
            @OpenUIState.canceled += instance.OnOpenUIState;
            @OpenMap.started += instance.OnOpenMap;
            @OpenMap.performed += instance.OnOpenMap;
            @OpenMap.canceled += instance.OnOpenMap;
            @ScrollWheel.started += instance.OnScrollWheel;
            @ScrollWheel.performed += instance.OnScrollWheel;
            @ScrollWheel.canceled += instance.OnScrollWheel;
            @OpenConsole.started += instance.OnOpenConsole;
            @OpenConsole.performed += instance.OnOpenConsole;
            @OpenConsole.canceled += instance.OnOpenConsole;
            @TurnCursorOnOff.started += instance.OnTurnCursorOnOff;
            @TurnCursorOnOff.performed += instance.OnTurnCursorOnOff;
            @TurnCursorOnOff.canceled += instance.OnTurnCursorOnOff;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="Keyboard_PlayerActions" />
        private void UnregisterCallbacks(IKeyboard_PlayerActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Sprint.started -= instance.OnSprint;
            @Sprint.performed -= instance.OnSprint;
            @Sprint.canceled -= instance.OnSprint;
            @Crouch.started -= instance.OnCrouch;
            @Crouch.performed -= instance.OnCrouch;
            @Crouch.canceled -= instance.OnCrouch;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
            @NormalAttack.started -= instance.OnNormalAttack;
            @NormalAttack.performed -= instance.OnNormalAttack;
            @NormalAttack.canceled -= instance.OnNormalAttack;
            @ChargedAttack.started -= instance.OnChargedAttack;
            @ChargedAttack.performed -= instance.OnChargedAttack;
            @ChargedAttack.canceled -= instance.OnChargedAttack;
            @Skill0.started -= instance.OnSkill0;
            @Skill0.performed -= instance.OnSkill0;
            @Skill0.canceled -= instance.OnSkill0;
            @Skill1.started -= instance.OnSkill1;
            @Skill1.performed -= instance.OnSkill1;
            @Skill1.canceled -= instance.OnSkill1;
            @Skill2.started -= instance.OnSkill2;
            @Skill2.performed -= instance.OnSkill2;
            @Skill2.canceled -= instance.OnSkill2;
            @OpenUIState.started -= instance.OnOpenUIState;
            @OpenUIState.performed -= instance.OnOpenUIState;
            @OpenUIState.canceled -= instance.OnOpenUIState;
            @OpenMap.started -= instance.OnOpenMap;
            @OpenMap.performed -= instance.OnOpenMap;
            @OpenMap.canceled -= instance.OnOpenMap;
            @ScrollWheel.started -= instance.OnScrollWheel;
            @ScrollWheel.performed -= instance.OnScrollWheel;
            @ScrollWheel.canceled -= instance.OnScrollWheel;
            @OpenConsole.started -= instance.OnOpenConsole;
            @OpenConsole.performed -= instance.OnOpenConsole;
            @OpenConsole.canceled -= instance.OnOpenConsole;
            @TurnCursorOnOff.started -= instance.OnTurnCursorOnOff;
            @TurnCursorOnOff.performed -= instance.OnTurnCursorOnOff;
            @TurnCursorOnOff.canceled -= instance.OnTurnCursorOnOff;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="Keyboard_PlayerActions.UnregisterCallbacks(IKeyboard_PlayerActions)" />.
        /// </summary>
        /// <seealso cref="Keyboard_PlayerActions.UnregisterCallbacks(IKeyboard_PlayerActions)" />
        public void RemoveCallbacks(IKeyboard_PlayerActions instance)
        {
            if (m_Wrapper.m_Keyboard_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="Keyboard_PlayerActions.AddCallbacks(IKeyboard_PlayerActions)" />
        /// <seealso cref="Keyboard_PlayerActions.RemoveCallbacks(IKeyboard_PlayerActions)" />
        /// <seealso cref="Keyboard_PlayerActions.UnregisterCallbacks(IKeyboard_PlayerActions)" />
        public void SetCallbacks(IKeyboard_PlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_Keyboard_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Keyboard_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="Keyboard_PlayerActions" /> instance referencing this action map.
    /// </summary>
    public Keyboard_PlayerActions @Keyboard_Player => new Keyboard_PlayerActions(this);

    // Keyboard_UIState
    private readonly InputActionMap m_Keyboard_UIState;
    private List<IKeyboard_UIStateActions> m_Keyboard_UIStateActionsCallbackInterfaces = new List<IKeyboard_UIStateActions>();
    private readonly InputAction m_Keyboard_UIState_CloseUIState;
    private readonly InputAction m_Keyboard_UIState_NextUIState;
    private readonly InputAction m_Keyboard_UIState_PreviousUIState;
    /// <summary>
    /// Provides access to input actions defined in input action map "Keyboard_UIState".
    /// </summary>
    public struct Keyboard_UIStateActions
    {
        private @PlayerControls m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public Keyboard_UIStateActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "Keyboard_UIState/CloseUIState".
        /// </summary>
        public InputAction @CloseUIState => m_Wrapper.m_Keyboard_UIState_CloseUIState;
        /// <summary>
        /// Provides access to the underlying input action "Keyboard_UIState/NextUIState".
        /// </summary>
        public InputAction @NextUIState => m_Wrapper.m_Keyboard_UIState_NextUIState;
        /// <summary>
        /// Provides access to the underlying input action "Keyboard_UIState/PreviousUIState".
        /// </summary>
        public InputAction @PreviousUIState => m_Wrapper.m_Keyboard_UIState_PreviousUIState;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_Keyboard_UIState; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="Keyboard_UIStateActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(Keyboard_UIStateActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="Keyboard_UIStateActions" />
        public void AddCallbacks(IKeyboard_UIStateActions instance)
        {
            if (instance == null || m_Wrapper.m_Keyboard_UIStateActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Keyboard_UIStateActionsCallbackInterfaces.Add(instance);
            @CloseUIState.started += instance.OnCloseUIState;
            @CloseUIState.performed += instance.OnCloseUIState;
            @CloseUIState.canceled += instance.OnCloseUIState;
            @NextUIState.started += instance.OnNextUIState;
            @NextUIState.performed += instance.OnNextUIState;
            @NextUIState.canceled += instance.OnNextUIState;
            @PreviousUIState.started += instance.OnPreviousUIState;
            @PreviousUIState.performed += instance.OnPreviousUIState;
            @PreviousUIState.canceled += instance.OnPreviousUIState;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="Keyboard_UIStateActions" />
        private void UnregisterCallbacks(IKeyboard_UIStateActions instance)
        {
            @CloseUIState.started -= instance.OnCloseUIState;
            @CloseUIState.performed -= instance.OnCloseUIState;
            @CloseUIState.canceled -= instance.OnCloseUIState;
            @NextUIState.started -= instance.OnNextUIState;
            @NextUIState.performed -= instance.OnNextUIState;
            @NextUIState.canceled -= instance.OnNextUIState;
            @PreviousUIState.started -= instance.OnPreviousUIState;
            @PreviousUIState.performed -= instance.OnPreviousUIState;
            @PreviousUIState.canceled -= instance.OnPreviousUIState;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="Keyboard_UIStateActions.UnregisterCallbacks(IKeyboard_UIStateActions)" />.
        /// </summary>
        /// <seealso cref="Keyboard_UIStateActions.UnregisterCallbacks(IKeyboard_UIStateActions)" />
        public void RemoveCallbacks(IKeyboard_UIStateActions instance)
        {
            if (m_Wrapper.m_Keyboard_UIStateActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="Keyboard_UIStateActions.AddCallbacks(IKeyboard_UIStateActions)" />
        /// <seealso cref="Keyboard_UIStateActions.RemoveCallbacks(IKeyboard_UIStateActions)" />
        /// <seealso cref="Keyboard_UIStateActions.UnregisterCallbacks(IKeyboard_UIStateActions)" />
        public void SetCallbacks(IKeyboard_UIStateActions instance)
        {
            foreach (var item in m_Wrapper.m_Keyboard_UIStateActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Keyboard_UIStateActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="Keyboard_UIStateActions" /> instance referencing this action map.
    /// </summary>
    public Keyboard_UIStateActions @Keyboard_UIState => new Keyboard_UIStateActions(this);

    // Keyboard_QuestsUI
    private readonly InputActionMap m_Keyboard_QuestsUI;
    private List<IKeyboard_QuestsUIActions> m_Keyboard_QuestsUIActionsCallbackInterfaces = new List<IKeyboard_QuestsUIActions>();
    private readonly InputAction m_Keyboard_QuestsUI_NextQuestPage;
    private readonly InputAction m_Keyboard_QuestsUI_PreviousQuestPage;
    /// <summary>
    /// Provides access to input actions defined in input action map "Keyboard_QuestsUI".
    /// </summary>
    public struct Keyboard_QuestsUIActions
    {
        private @PlayerControls m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public Keyboard_QuestsUIActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "Keyboard_QuestsUI/NextQuestPage".
        /// </summary>
        public InputAction @NextQuestPage => m_Wrapper.m_Keyboard_QuestsUI_NextQuestPage;
        /// <summary>
        /// Provides access to the underlying input action "Keyboard_QuestsUI/PreviousQuestPage".
        /// </summary>
        public InputAction @PreviousQuestPage => m_Wrapper.m_Keyboard_QuestsUI_PreviousQuestPage;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_Keyboard_QuestsUI; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="Keyboard_QuestsUIActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(Keyboard_QuestsUIActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="Keyboard_QuestsUIActions" />
        public void AddCallbacks(IKeyboard_QuestsUIActions instance)
        {
            if (instance == null || m_Wrapper.m_Keyboard_QuestsUIActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Keyboard_QuestsUIActionsCallbackInterfaces.Add(instance);
            @NextQuestPage.started += instance.OnNextQuestPage;
            @NextQuestPage.performed += instance.OnNextQuestPage;
            @NextQuestPage.canceled += instance.OnNextQuestPage;
            @PreviousQuestPage.started += instance.OnPreviousQuestPage;
            @PreviousQuestPage.performed += instance.OnPreviousQuestPage;
            @PreviousQuestPage.canceled += instance.OnPreviousQuestPage;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="Keyboard_QuestsUIActions" />
        private void UnregisterCallbacks(IKeyboard_QuestsUIActions instance)
        {
            @NextQuestPage.started -= instance.OnNextQuestPage;
            @NextQuestPage.performed -= instance.OnNextQuestPage;
            @NextQuestPage.canceled -= instance.OnNextQuestPage;
            @PreviousQuestPage.started -= instance.OnPreviousQuestPage;
            @PreviousQuestPage.performed -= instance.OnPreviousQuestPage;
            @PreviousQuestPage.canceled -= instance.OnPreviousQuestPage;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="Keyboard_QuestsUIActions.UnregisterCallbacks(IKeyboard_QuestsUIActions)" />.
        /// </summary>
        /// <seealso cref="Keyboard_QuestsUIActions.UnregisterCallbacks(IKeyboard_QuestsUIActions)" />
        public void RemoveCallbacks(IKeyboard_QuestsUIActions instance)
        {
            if (m_Wrapper.m_Keyboard_QuestsUIActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="Keyboard_QuestsUIActions.AddCallbacks(IKeyboard_QuestsUIActions)" />
        /// <seealso cref="Keyboard_QuestsUIActions.RemoveCallbacks(IKeyboard_QuestsUIActions)" />
        /// <seealso cref="Keyboard_QuestsUIActions.UnregisterCallbacks(IKeyboard_QuestsUIActions)" />
        public void SetCallbacks(IKeyboard_QuestsUIActions instance)
        {
            foreach (var item in m_Wrapper.m_Keyboard_QuestsUIActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Keyboard_QuestsUIActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="Keyboard_QuestsUIActions" /> instance referencing this action map.
    /// </summary>
    public Keyboard_QuestsUIActions @Keyboard_QuestsUI => new Keyboard_QuestsUIActions(this);

    // Keyboard_InventoryUI
    private readonly InputActionMap m_Keyboard_InventoryUI;
    private List<IKeyboard_InventoryUIActions> m_Keyboard_InventoryUIActionsCallbackInterfaces = new List<IKeyboard_InventoryUIActions>();
    private readonly InputAction m_Keyboard_InventoryUI_NextInventoryPage;
    private readonly InputAction m_Keyboard_InventoryUI_PreviousInventoryPage;
    private readonly InputAction m_Keyboard_InventoryUI_NextInventorySlot;
    private readonly InputAction m_Keyboard_InventoryUI_PreviousInventorySlot;
    /// <summary>
    /// Provides access to input actions defined in input action map "Keyboard_InventoryUI".
    /// </summary>
    public struct Keyboard_InventoryUIActions
    {
        private @PlayerControls m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public Keyboard_InventoryUIActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "Keyboard_InventoryUI/NextInventoryPage".
        /// </summary>
        public InputAction @NextInventoryPage => m_Wrapper.m_Keyboard_InventoryUI_NextInventoryPage;
        /// <summary>
        /// Provides access to the underlying input action "Keyboard_InventoryUI/PreviousInventoryPage".
        /// </summary>
        public InputAction @PreviousInventoryPage => m_Wrapper.m_Keyboard_InventoryUI_PreviousInventoryPage;
        /// <summary>
        /// Provides access to the underlying input action "Keyboard_InventoryUI/NextInventorySlot".
        /// </summary>
        public InputAction @NextInventorySlot => m_Wrapper.m_Keyboard_InventoryUI_NextInventorySlot;
        /// <summary>
        /// Provides access to the underlying input action "Keyboard_InventoryUI/PreviousInventorySlot".
        /// </summary>
        public InputAction @PreviousInventorySlot => m_Wrapper.m_Keyboard_InventoryUI_PreviousInventorySlot;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_Keyboard_InventoryUI; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="Keyboard_InventoryUIActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(Keyboard_InventoryUIActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="Keyboard_InventoryUIActions" />
        public void AddCallbacks(IKeyboard_InventoryUIActions instance)
        {
            if (instance == null || m_Wrapper.m_Keyboard_InventoryUIActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Keyboard_InventoryUIActionsCallbackInterfaces.Add(instance);
            @NextInventoryPage.started += instance.OnNextInventoryPage;
            @NextInventoryPage.performed += instance.OnNextInventoryPage;
            @NextInventoryPage.canceled += instance.OnNextInventoryPage;
            @PreviousInventoryPage.started += instance.OnPreviousInventoryPage;
            @PreviousInventoryPage.performed += instance.OnPreviousInventoryPage;
            @PreviousInventoryPage.canceled += instance.OnPreviousInventoryPage;
            @NextInventorySlot.started += instance.OnNextInventorySlot;
            @NextInventorySlot.performed += instance.OnNextInventorySlot;
            @NextInventorySlot.canceled += instance.OnNextInventorySlot;
            @PreviousInventorySlot.started += instance.OnPreviousInventorySlot;
            @PreviousInventorySlot.performed += instance.OnPreviousInventorySlot;
            @PreviousInventorySlot.canceled += instance.OnPreviousInventorySlot;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="Keyboard_InventoryUIActions" />
        private void UnregisterCallbacks(IKeyboard_InventoryUIActions instance)
        {
            @NextInventoryPage.started -= instance.OnNextInventoryPage;
            @NextInventoryPage.performed -= instance.OnNextInventoryPage;
            @NextInventoryPage.canceled -= instance.OnNextInventoryPage;
            @PreviousInventoryPage.started -= instance.OnPreviousInventoryPage;
            @PreviousInventoryPage.performed -= instance.OnPreviousInventoryPage;
            @PreviousInventoryPage.canceled -= instance.OnPreviousInventoryPage;
            @NextInventorySlot.started -= instance.OnNextInventorySlot;
            @NextInventorySlot.performed -= instance.OnNextInventorySlot;
            @NextInventorySlot.canceled -= instance.OnNextInventorySlot;
            @PreviousInventorySlot.started -= instance.OnPreviousInventorySlot;
            @PreviousInventorySlot.performed -= instance.OnPreviousInventorySlot;
            @PreviousInventorySlot.canceled -= instance.OnPreviousInventorySlot;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="Keyboard_InventoryUIActions.UnregisterCallbacks(IKeyboard_InventoryUIActions)" />.
        /// </summary>
        /// <seealso cref="Keyboard_InventoryUIActions.UnregisterCallbacks(IKeyboard_InventoryUIActions)" />
        public void RemoveCallbacks(IKeyboard_InventoryUIActions instance)
        {
            if (m_Wrapper.m_Keyboard_InventoryUIActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="Keyboard_InventoryUIActions.AddCallbacks(IKeyboard_InventoryUIActions)" />
        /// <seealso cref="Keyboard_InventoryUIActions.RemoveCallbacks(IKeyboard_InventoryUIActions)" />
        /// <seealso cref="Keyboard_InventoryUIActions.UnregisterCallbacks(IKeyboard_InventoryUIActions)" />
        public void SetCallbacks(IKeyboard_InventoryUIActions instance)
        {
            foreach (var item in m_Wrapper.m_Keyboard_InventoryUIActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Keyboard_InventoryUIActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="Keyboard_InventoryUIActions" /> instance referencing this action map.
    /// </summary>
    public Keyboard_InventoryUIActions @Keyboard_InventoryUI => new Keyboard_InventoryUIActions(this);

    // Keyboard_EquipmentUI
    private readonly InputActionMap m_Keyboard_EquipmentUI;
    private List<IKeyboard_EquipmentUIActions> m_Keyboard_EquipmentUIActionsCallbackInterfaces = new List<IKeyboard_EquipmentUIActions>();
    private readonly InputAction m_Keyboard_EquipmentUI_NextInventoryPage;
    private readonly InputAction m_Keyboard_EquipmentUI_PreviousInventoryPage;
    private readonly InputAction m_Keyboard_EquipmentUI_NextInventorySlot;
    private readonly InputAction m_Keyboard_EquipmentUI_PreviousInventorySlot;
    /// <summary>
    /// Provides access to input actions defined in input action map "Keyboard_EquipmentUI".
    /// </summary>
    public struct Keyboard_EquipmentUIActions
    {
        private @PlayerControls m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public Keyboard_EquipmentUIActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "Keyboard_EquipmentUI/NextInventoryPage".
        /// </summary>
        public InputAction @NextInventoryPage => m_Wrapper.m_Keyboard_EquipmentUI_NextInventoryPage;
        /// <summary>
        /// Provides access to the underlying input action "Keyboard_EquipmentUI/PreviousInventoryPage".
        /// </summary>
        public InputAction @PreviousInventoryPage => m_Wrapper.m_Keyboard_EquipmentUI_PreviousInventoryPage;
        /// <summary>
        /// Provides access to the underlying input action "Keyboard_EquipmentUI/NextInventorySlot".
        /// </summary>
        public InputAction @NextInventorySlot => m_Wrapper.m_Keyboard_EquipmentUI_NextInventorySlot;
        /// <summary>
        /// Provides access to the underlying input action "Keyboard_EquipmentUI/PreviousInventorySlot".
        /// </summary>
        public InputAction @PreviousInventorySlot => m_Wrapper.m_Keyboard_EquipmentUI_PreviousInventorySlot;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_Keyboard_EquipmentUI; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="Keyboard_EquipmentUIActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(Keyboard_EquipmentUIActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="Keyboard_EquipmentUIActions" />
        public void AddCallbacks(IKeyboard_EquipmentUIActions instance)
        {
            if (instance == null || m_Wrapper.m_Keyboard_EquipmentUIActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Keyboard_EquipmentUIActionsCallbackInterfaces.Add(instance);
            @NextInventoryPage.started += instance.OnNextInventoryPage;
            @NextInventoryPage.performed += instance.OnNextInventoryPage;
            @NextInventoryPage.canceled += instance.OnNextInventoryPage;
            @PreviousInventoryPage.started += instance.OnPreviousInventoryPage;
            @PreviousInventoryPage.performed += instance.OnPreviousInventoryPage;
            @PreviousInventoryPage.canceled += instance.OnPreviousInventoryPage;
            @NextInventorySlot.started += instance.OnNextInventorySlot;
            @NextInventorySlot.performed += instance.OnNextInventorySlot;
            @NextInventorySlot.canceled += instance.OnNextInventorySlot;
            @PreviousInventorySlot.started += instance.OnPreviousInventorySlot;
            @PreviousInventorySlot.performed += instance.OnPreviousInventorySlot;
            @PreviousInventorySlot.canceled += instance.OnPreviousInventorySlot;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="Keyboard_EquipmentUIActions" />
        private void UnregisterCallbacks(IKeyboard_EquipmentUIActions instance)
        {
            @NextInventoryPage.started -= instance.OnNextInventoryPage;
            @NextInventoryPage.performed -= instance.OnNextInventoryPage;
            @NextInventoryPage.canceled -= instance.OnNextInventoryPage;
            @PreviousInventoryPage.started -= instance.OnPreviousInventoryPage;
            @PreviousInventoryPage.performed -= instance.OnPreviousInventoryPage;
            @PreviousInventoryPage.canceled -= instance.OnPreviousInventoryPage;
            @NextInventorySlot.started -= instance.OnNextInventorySlot;
            @NextInventorySlot.performed -= instance.OnNextInventorySlot;
            @NextInventorySlot.canceled -= instance.OnNextInventorySlot;
            @PreviousInventorySlot.started -= instance.OnPreviousInventorySlot;
            @PreviousInventorySlot.performed -= instance.OnPreviousInventorySlot;
            @PreviousInventorySlot.canceled -= instance.OnPreviousInventorySlot;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="Keyboard_EquipmentUIActions.UnregisterCallbacks(IKeyboard_EquipmentUIActions)" />.
        /// </summary>
        /// <seealso cref="Keyboard_EquipmentUIActions.UnregisterCallbacks(IKeyboard_EquipmentUIActions)" />
        public void RemoveCallbacks(IKeyboard_EquipmentUIActions instance)
        {
            if (m_Wrapper.m_Keyboard_EquipmentUIActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="Keyboard_EquipmentUIActions.AddCallbacks(IKeyboard_EquipmentUIActions)" />
        /// <seealso cref="Keyboard_EquipmentUIActions.RemoveCallbacks(IKeyboard_EquipmentUIActions)" />
        /// <seealso cref="Keyboard_EquipmentUIActions.UnregisterCallbacks(IKeyboard_EquipmentUIActions)" />
        public void SetCallbacks(IKeyboard_EquipmentUIActions instance)
        {
            foreach (var item in m_Wrapper.m_Keyboard_EquipmentUIActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Keyboard_EquipmentUIActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="Keyboard_EquipmentUIActions" /> instance referencing this action map.
    /// </summary>
    public Keyboard_EquipmentUIActions @Keyboard_EquipmentUI => new Keyboard_EquipmentUIActions(this);

    // Keyboard_SystemUI
    private readonly InputActionMap m_Keyboard_SystemUI;
    private List<IKeyboard_SystemUIActions> m_Keyboard_SystemUIActionsCallbackInterfaces = new List<IKeyboard_SystemUIActions>();
    /// <summary>
    /// Provides access to input actions defined in input action map "Keyboard_SystemUI".
    /// </summary>
    public struct Keyboard_SystemUIActions
    {
        private @PlayerControls m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public Keyboard_SystemUIActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_Keyboard_SystemUI; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="Keyboard_SystemUIActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(Keyboard_SystemUIActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="Keyboard_SystemUIActions" />
        public void AddCallbacks(IKeyboard_SystemUIActions instance)
        {
            if (instance == null || m_Wrapper.m_Keyboard_SystemUIActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Keyboard_SystemUIActionsCallbackInterfaces.Add(instance);
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="Keyboard_SystemUIActions" />
        private void UnregisterCallbacks(IKeyboard_SystemUIActions instance)
        {
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="Keyboard_SystemUIActions.UnregisterCallbacks(IKeyboard_SystemUIActions)" />.
        /// </summary>
        /// <seealso cref="Keyboard_SystemUIActions.UnregisterCallbacks(IKeyboard_SystemUIActions)" />
        public void RemoveCallbacks(IKeyboard_SystemUIActions instance)
        {
            if (m_Wrapper.m_Keyboard_SystemUIActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="Keyboard_SystemUIActions.AddCallbacks(IKeyboard_SystemUIActions)" />
        /// <seealso cref="Keyboard_SystemUIActions.RemoveCallbacks(IKeyboard_SystemUIActions)" />
        /// <seealso cref="Keyboard_SystemUIActions.UnregisterCallbacks(IKeyboard_SystemUIActions)" />
        public void SetCallbacks(IKeyboard_SystemUIActions instance)
        {
            foreach (var item in m_Wrapper.m_Keyboard_SystemUIActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Keyboard_SystemUIActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="Keyboard_SystemUIActions" /> instance referencing this action map.
    /// </summary>
    public Keyboard_SystemUIActions @Keyboard_SystemUI => new Keyboard_SystemUIActions(this);

    // Keyboard_Map
    private readonly InputActionMap m_Keyboard_Map;
    private List<IKeyboard_MapActions> m_Keyboard_MapActionsCallbackInterfaces = new List<IKeyboard_MapActions>();
    private readonly InputAction m_Keyboard_Map_CloseMap;
    /// <summary>
    /// Provides access to input actions defined in input action map "Keyboard_Map".
    /// </summary>
    public struct Keyboard_MapActions
    {
        private @PlayerControls m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public Keyboard_MapActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "Keyboard_Map/CloseMap".
        /// </summary>
        public InputAction @CloseMap => m_Wrapper.m_Keyboard_Map_CloseMap;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_Keyboard_Map; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="Keyboard_MapActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(Keyboard_MapActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="Keyboard_MapActions" />
        public void AddCallbacks(IKeyboard_MapActions instance)
        {
            if (instance == null || m_Wrapper.m_Keyboard_MapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Keyboard_MapActionsCallbackInterfaces.Add(instance);
            @CloseMap.started += instance.OnCloseMap;
            @CloseMap.performed += instance.OnCloseMap;
            @CloseMap.canceled += instance.OnCloseMap;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="Keyboard_MapActions" />
        private void UnregisterCallbacks(IKeyboard_MapActions instance)
        {
            @CloseMap.started -= instance.OnCloseMap;
            @CloseMap.performed -= instance.OnCloseMap;
            @CloseMap.canceled -= instance.OnCloseMap;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="Keyboard_MapActions.UnregisterCallbacks(IKeyboard_MapActions)" />.
        /// </summary>
        /// <seealso cref="Keyboard_MapActions.UnregisterCallbacks(IKeyboard_MapActions)" />
        public void RemoveCallbacks(IKeyboard_MapActions instance)
        {
            if (m_Wrapper.m_Keyboard_MapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="Keyboard_MapActions.AddCallbacks(IKeyboard_MapActions)" />
        /// <seealso cref="Keyboard_MapActions.RemoveCallbacks(IKeyboard_MapActions)" />
        /// <seealso cref="Keyboard_MapActions.UnregisterCallbacks(IKeyboard_MapActions)" />
        public void SetCallbacks(IKeyboard_MapActions instance)
        {
            foreach (var item in m_Wrapper.m_Keyboard_MapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Keyboard_MapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="Keyboard_MapActions" /> instance referencing this action map.
    /// </summary>
    public Keyboard_MapActions @Keyboard_Map => new Keyboard_MapActions(this);

    // Keyboard_Dialogues
    private readonly InputActionMap m_Keyboard_Dialogues;
    private List<IKeyboard_DialoguesActions> m_Keyboard_DialoguesActionsCallbackInterfaces = new List<IKeyboard_DialoguesActions>();
    private readonly InputAction m_Keyboard_Dialogues_Continue;
    /// <summary>
    /// Provides access to input actions defined in input action map "Keyboard_Dialogues".
    /// </summary>
    public struct Keyboard_DialoguesActions
    {
        private @PlayerControls m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public Keyboard_DialoguesActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "Keyboard_Dialogues/Continue".
        /// </summary>
        public InputAction @Continue => m_Wrapper.m_Keyboard_Dialogues_Continue;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_Keyboard_Dialogues; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="Keyboard_DialoguesActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(Keyboard_DialoguesActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="Keyboard_DialoguesActions" />
        public void AddCallbacks(IKeyboard_DialoguesActions instance)
        {
            if (instance == null || m_Wrapper.m_Keyboard_DialoguesActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Keyboard_DialoguesActionsCallbackInterfaces.Add(instance);
            @Continue.started += instance.OnContinue;
            @Continue.performed += instance.OnContinue;
            @Continue.canceled += instance.OnContinue;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="Keyboard_DialoguesActions" />
        private void UnregisterCallbacks(IKeyboard_DialoguesActions instance)
        {
            @Continue.started -= instance.OnContinue;
            @Continue.performed -= instance.OnContinue;
            @Continue.canceled -= instance.OnContinue;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="Keyboard_DialoguesActions.UnregisterCallbacks(IKeyboard_DialoguesActions)" />.
        /// </summary>
        /// <seealso cref="Keyboard_DialoguesActions.UnregisterCallbacks(IKeyboard_DialoguesActions)" />
        public void RemoveCallbacks(IKeyboard_DialoguesActions instance)
        {
            if (m_Wrapper.m_Keyboard_DialoguesActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="Keyboard_DialoguesActions.AddCallbacks(IKeyboard_DialoguesActions)" />
        /// <seealso cref="Keyboard_DialoguesActions.RemoveCallbacks(IKeyboard_DialoguesActions)" />
        /// <seealso cref="Keyboard_DialoguesActions.UnregisterCallbacks(IKeyboard_DialoguesActions)" />
        public void SetCallbacks(IKeyboard_DialoguesActions instance)
        {
            foreach (var item in m_Wrapper.m_Keyboard_DialoguesActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Keyboard_DialoguesActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="Keyboard_DialoguesActions" /> instance referencing this action map.
    /// </summary>
    public Keyboard_DialoguesActions @Keyboard_Dialogues => new Keyboard_DialoguesActions(this);

    // Keyboard_Shop
    private readonly InputActionMap m_Keyboard_Shop;
    private List<IKeyboard_ShopActions> m_Keyboard_ShopActionsCallbackInterfaces = new List<IKeyboard_ShopActions>();
    private readonly InputAction m_Keyboard_Shop_CloseShop;
    /// <summary>
    /// Provides access to input actions defined in input action map "Keyboard_Shop".
    /// </summary>
    public struct Keyboard_ShopActions
    {
        private @PlayerControls m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public Keyboard_ShopActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "Keyboard_Shop/CloseShop".
        /// </summary>
        public InputAction @CloseShop => m_Wrapper.m_Keyboard_Shop_CloseShop;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_Keyboard_Shop; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="Keyboard_ShopActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(Keyboard_ShopActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="Keyboard_ShopActions" />
        public void AddCallbacks(IKeyboard_ShopActions instance)
        {
            if (instance == null || m_Wrapper.m_Keyboard_ShopActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Keyboard_ShopActionsCallbackInterfaces.Add(instance);
            @CloseShop.started += instance.OnCloseShop;
            @CloseShop.performed += instance.OnCloseShop;
            @CloseShop.canceled += instance.OnCloseShop;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="Keyboard_ShopActions" />
        private void UnregisterCallbacks(IKeyboard_ShopActions instance)
        {
            @CloseShop.started -= instance.OnCloseShop;
            @CloseShop.performed -= instance.OnCloseShop;
            @CloseShop.canceled -= instance.OnCloseShop;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="Keyboard_ShopActions.UnregisterCallbacks(IKeyboard_ShopActions)" />.
        /// </summary>
        /// <seealso cref="Keyboard_ShopActions.UnregisterCallbacks(IKeyboard_ShopActions)" />
        public void RemoveCallbacks(IKeyboard_ShopActions instance)
        {
            if (m_Wrapper.m_Keyboard_ShopActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="Keyboard_ShopActions.AddCallbacks(IKeyboard_ShopActions)" />
        /// <seealso cref="Keyboard_ShopActions.RemoveCallbacks(IKeyboard_ShopActions)" />
        /// <seealso cref="Keyboard_ShopActions.UnregisterCallbacks(IKeyboard_ShopActions)" />
        public void SetCallbacks(IKeyboard_ShopActions instance)
        {
            foreach (var item in m_Wrapper.m_Keyboard_ShopActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Keyboard_ShopActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="Keyboard_ShopActions" /> instance referencing this action map.
    /// </summary>
    public Keyboard_ShopActions @Keyboard_Shop => new Keyboard_ShopActions(this);

    // Keyboard_Console
    private readonly InputActionMap m_Keyboard_Console;
    private List<IKeyboard_ConsoleActions> m_Keyboard_ConsoleActionsCallbackInterfaces = new List<IKeyboard_ConsoleActions>();
    private readonly InputAction m_Keyboard_Console_ConfirmInput;
    private readonly InputAction m_Keyboard_Console_CloseConsole;
    /// <summary>
    /// Provides access to input actions defined in input action map "Keyboard_Console".
    /// </summary>
    public struct Keyboard_ConsoleActions
    {
        private @PlayerControls m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public Keyboard_ConsoleActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "Keyboard_Console/ConfirmInput".
        /// </summary>
        public InputAction @ConfirmInput => m_Wrapper.m_Keyboard_Console_ConfirmInput;
        /// <summary>
        /// Provides access to the underlying input action "Keyboard_Console/CloseConsole".
        /// </summary>
        public InputAction @CloseConsole => m_Wrapper.m_Keyboard_Console_CloseConsole;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_Keyboard_Console; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="Keyboard_ConsoleActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(Keyboard_ConsoleActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="Keyboard_ConsoleActions" />
        public void AddCallbacks(IKeyboard_ConsoleActions instance)
        {
            if (instance == null || m_Wrapper.m_Keyboard_ConsoleActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Keyboard_ConsoleActionsCallbackInterfaces.Add(instance);
            @ConfirmInput.started += instance.OnConfirmInput;
            @ConfirmInput.performed += instance.OnConfirmInput;
            @ConfirmInput.canceled += instance.OnConfirmInput;
            @CloseConsole.started += instance.OnCloseConsole;
            @CloseConsole.performed += instance.OnCloseConsole;
            @CloseConsole.canceled += instance.OnCloseConsole;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="Keyboard_ConsoleActions" />
        private void UnregisterCallbacks(IKeyboard_ConsoleActions instance)
        {
            @ConfirmInput.started -= instance.OnConfirmInput;
            @ConfirmInput.performed -= instance.OnConfirmInput;
            @ConfirmInput.canceled -= instance.OnConfirmInput;
            @CloseConsole.started -= instance.OnCloseConsole;
            @CloseConsole.performed -= instance.OnCloseConsole;
            @CloseConsole.canceled -= instance.OnCloseConsole;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="Keyboard_ConsoleActions.UnregisterCallbacks(IKeyboard_ConsoleActions)" />.
        /// </summary>
        /// <seealso cref="Keyboard_ConsoleActions.UnregisterCallbacks(IKeyboard_ConsoleActions)" />
        public void RemoveCallbacks(IKeyboard_ConsoleActions instance)
        {
            if (m_Wrapper.m_Keyboard_ConsoleActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="Keyboard_ConsoleActions.AddCallbacks(IKeyboard_ConsoleActions)" />
        /// <seealso cref="Keyboard_ConsoleActions.RemoveCallbacks(IKeyboard_ConsoleActions)" />
        /// <seealso cref="Keyboard_ConsoleActions.UnregisterCallbacks(IKeyboard_ConsoleActions)" />
        public void SetCallbacks(IKeyboard_ConsoleActions instance)
        {
            foreach (var item in m_Wrapper.m_Keyboard_ConsoleActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Keyboard_ConsoleActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="Keyboard_ConsoleActions" /> instance referencing this action map.
    /// </summary>
    public Keyboard_ConsoleActions @Keyboard_Console => new Keyboard_ConsoleActions(this);

    // DetectMouseKeyboard
    private readonly InputActionMap m_DetectMouseKeyboard;
    private List<IDetectMouseKeyboardActions> m_DetectMouseKeyboardActionsCallbackInterfaces = new List<IDetectMouseKeyboardActions>();
    private readonly InputAction m_DetectMouseKeyboard_SwitchToMouseKeyboard;
    /// <summary>
    /// Provides access to input actions defined in input action map "DetectMouseKeyboard".
    /// </summary>
    public struct DetectMouseKeyboardActions
    {
        private @PlayerControls m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public DetectMouseKeyboardActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "DetectMouseKeyboard/SwitchToMouseKeyboard".
        /// </summary>
        public InputAction @SwitchToMouseKeyboard => m_Wrapper.m_DetectMouseKeyboard_SwitchToMouseKeyboard;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_DetectMouseKeyboard; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="DetectMouseKeyboardActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(DetectMouseKeyboardActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="DetectMouseKeyboardActions" />
        public void AddCallbacks(IDetectMouseKeyboardActions instance)
        {
            if (instance == null || m_Wrapper.m_DetectMouseKeyboardActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DetectMouseKeyboardActionsCallbackInterfaces.Add(instance);
            @SwitchToMouseKeyboard.started += instance.OnSwitchToMouseKeyboard;
            @SwitchToMouseKeyboard.performed += instance.OnSwitchToMouseKeyboard;
            @SwitchToMouseKeyboard.canceled += instance.OnSwitchToMouseKeyboard;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="DetectMouseKeyboardActions" />
        private void UnregisterCallbacks(IDetectMouseKeyboardActions instance)
        {
            @SwitchToMouseKeyboard.started -= instance.OnSwitchToMouseKeyboard;
            @SwitchToMouseKeyboard.performed -= instance.OnSwitchToMouseKeyboard;
            @SwitchToMouseKeyboard.canceled -= instance.OnSwitchToMouseKeyboard;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="DetectMouseKeyboardActions.UnregisterCallbacks(IDetectMouseKeyboardActions)" />.
        /// </summary>
        /// <seealso cref="DetectMouseKeyboardActions.UnregisterCallbacks(IDetectMouseKeyboardActions)" />
        public void RemoveCallbacks(IDetectMouseKeyboardActions instance)
        {
            if (m_Wrapper.m_DetectMouseKeyboardActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="DetectMouseKeyboardActions.AddCallbacks(IDetectMouseKeyboardActions)" />
        /// <seealso cref="DetectMouseKeyboardActions.RemoveCallbacks(IDetectMouseKeyboardActions)" />
        /// <seealso cref="DetectMouseKeyboardActions.UnregisterCallbacks(IDetectMouseKeyboardActions)" />
        public void SetCallbacks(IDetectMouseKeyboardActions instance)
        {
            foreach (var item in m_Wrapper.m_DetectMouseKeyboardActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DetectMouseKeyboardActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="DetectMouseKeyboardActions" /> instance referencing this action map.
    /// </summary>
    public DetectMouseKeyboardActions @DetectMouseKeyboard => new DetectMouseKeyboardActions(this);

    // Controller_Player
    private readonly InputActionMap m_Controller_Player;
    private List<IController_PlayerActions> m_Controller_PlayerActionsCallbackInterfaces = new List<IController_PlayerActions>();
    private readonly InputAction m_Controller_Player_Movement;
    private readonly InputAction m_Controller_Player_Sprint;
    private readonly InputAction m_Controller_Player_Crouch;
    private readonly InputAction m_Controller_Player_Jump;
    private readonly InputAction m_Controller_Player_Interact;
    private readonly InputAction m_Controller_Player_NormalAttack;
    private readonly InputAction m_Controller_Player_ChargedAttack;
    private readonly InputAction m_Controller_Player_Skill1;
    private readonly InputAction m_Controller_Player_Skill2;
    private readonly InputAction m_Controller_Player_Skill3;
    private readonly InputAction m_Controller_Player_OpenUIState;
    private readonly InputAction m_Controller_Player_OpenMap;
    /// <summary>
    /// Provides access to input actions defined in input action map "Controller_Player".
    /// </summary>
    public struct Controller_PlayerActions
    {
        private @PlayerControls m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public Controller_PlayerActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "Controller_Player/Movement".
        /// </summary>
        public InputAction @Movement => m_Wrapper.m_Controller_Player_Movement;
        /// <summary>
        /// Provides access to the underlying input action "Controller_Player/Sprint".
        /// </summary>
        public InputAction @Sprint => m_Wrapper.m_Controller_Player_Sprint;
        /// <summary>
        /// Provides access to the underlying input action "Controller_Player/Crouch".
        /// </summary>
        public InputAction @Crouch => m_Wrapper.m_Controller_Player_Crouch;
        /// <summary>
        /// Provides access to the underlying input action "Controller_Player/Jump".
        /// </summary>
        public InputAction @Jump => m_Wrapper.m_Controller_Player_Jump;
        /// <summary>
        /// Provides access to the underlying input action "Controller_Player/Interact".
        /// </summary>
        public InputAction @Interact => m_Wrapper.m_Controller_Player_Interact;
        /// <summary>
        /// Provides access to the underlying input action "Controller_Player/NormalAttack".
        /// </summary>
        public InputAction @NormalAttack => m_Wrapper.m_Controller_Player_NormalAttack;
        /// <summary>
        /// Provides access to the underlying input action "Controller_Player/ChargedAttack".
        /// </summary>
        public InputAction @ChargedAttack => m_Wrapper.m_Controller_Player_ChargedAttack;
        /// <summary>
        /// Provides access to the underlying input action "Controller_Player/Skill1".
        /// </summary>
        public InputAction @Skill1 => m_Wrapper.m_Controller_Player_Skill1;
        /// <summary>
        /// Provides access to the underlying input action "Controller_Player/Skill2".
        /// </summary>
        public InputAction @Skill2 => m_Wrapper.m_Controller_Player_Skill2;
        /// <summary>
        /// Provides access to the underlying input action "Controller_Player/Skill3".
        /// </summary>
        public InputAction @Skill3 => m_Wrapper.m_Controller_Player_Skill3;
        /// <summary>
        /// Provides access to the underlying input action "Controller_Player/OpenUIState".
        /// </summary>
        public InputAction @OpenUIState => m_Wrapper.m_Controller_Player_OpenUIState;
        /// <summary>
        /// Provides access to the underlying input action "Controller_Player/OpenMap".
        /// </summary>
        public InputAction @OpenMap => m_Wrapper.m_Controller_Player_OpenMap;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_Controller_Player; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="Controller_PlayerActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(Controller_PlayerActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="Controller_PlayerActions" />
        public void AddCallbacks(IController_PlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_Controller_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Controller_PlayerActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Sprint.started += instance.OnSprint;
            @Sprint.performed += instance.OnSprint;
            @Sprint.canceled += instance.OnSprint;
            @Crouch.started += instance.OnCrouch;
            @Crouch.performed += instance.OnCrouch;
            @Crouch.canceled += instance.OnCrouch;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
            @NormalAttack.started += instance.OnNormalAttack;
            @NormalAttack.performed += instance.OnNormalAttack;
            @NormalAttack.canceled += instance.OnNormalAttack;
            @ChargedAttack.started += instance.OnChargedAttack;
            @ChargedAttack.performed += instance.OnChargedAttack;
            @ChargedAttack.canceled += instance.OnChargedAttack;
            @Skill1.started += instance.OnSkill1;
            @Skill1.performed += instance.OnSkill1;
            @Skill1.canceled += instance.OnSkill1;
            @Skill2.started += instance.OnSkill2;
            @Skill2.performed += instance.OnSkill2;
            @Skill2.canceled += instance.OnSkill2;
            @Skill3.started += instance.OnSkill3;
            @Skill3.performed += instance.OnSkill3;
            @Skill3.canceled += instance.OnSkill3;
            @OpenUIState.started += instance.OnOpenUIState;
            @OpenUIState.performed += instance.OnOpenUIState;
            @OpenUIState.canceled += instance.OnOpenUIState;
            @OpenMap.started += instance.OnOpenMap;
            @OpenMap.performed += instance.OnOpenMap;
            @OpenMap.canceled += instance.OnOpenMap;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="Controller_PlayerActions" />
        private void UnregisterCallbacks(IController_PlayerActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Sprint.started -= instance.OnSprint;
            @Sprint.performed -= instance.OnSprint;
            @Sprint.canceled -= instance.OnSprint;
            @Crouch.started -= instance.OnCrouch;
            @Crouch.performed -= instance.OnCrouch;
            @Crouch.canceled -= instance.OnCrouch;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
            @NormalAttack.started -= instance.OnNormalAttack;
            @NormalAttack.performed -= instance.OnNormalAttack;
            @NormalAttack.canceled -= instance.OnNormalAttack;
            @ChargedAttack.started -= instance.OnChargedAttack;
            @ChargedAttack.performed -= instance.OnChargedAttack;
            @ChargedAttack.canceled -= instance.OnChargedAttack;
            @Skill1.started -= instance.OnSkill1;
            @Skill1.performed -= instance.OnSkill1;
            @Skill1.canceled -= instance.OnSkill1;
            @Skill2.started -= instance.OnSkill2;
            @Skill2.performed -= instance.OnSkill2;
            @Skill2.canceled -= instance.OnSkill2;
            @Skill3.started -= instance.OnSkill3;
            @Skill3.performed -= instance.OnSkill3;
            @Skill3.canceled -= instance.OnSkill3;
            @OpenUIState.started -= instance.OnOpenUIState;
            @OpenUIState.performed -= instance.OnOpenUIState;
            @OpenUIState.canceled -= instance.OnOpenUIState;
            @OpenMap.started -= instance.OnOpenMap;
            @OpenMap.performed -= instance.OnOpenMap;
            @OpenMap.canceled -= instance.OnOpenMap;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="Controller_PlayerActions.UnregisterCallbacks(IController_PlayerActions)" />.
        /// </summary>
        /// <seealso cref="Controller_PlayerActions.UnregisterCallbacks(IController_PlayerActions)" />
        public void RemoveCallbacks(IController_PlayerActions instance)
        {
            if (m_Wrapper.m_Controller_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="Controller_PlayerActions.AddCallbacks(IController_PlayerActions)" />
        /// <seealso cref="Controller_PlayerActions.RemoveCallbacks(IController_PlayerActions)" />
        /// <seealso cref="Controller_PlayerActions.UnregisterCallbacks(IController_PlayerActions)" />
        public void SetCallbacks(IController_PlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_Controller_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Controller_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="Controller_PlayerActions" /> instance referencing this action map.
    /// </summary>
    public Controller_PlayerActions @Controller_Player => new Controller_PlayerActions(this);

    // Controller_UIState
    private readonly InputActionMap m_Controller_UIState;
    private List<IController_UIStateActions> m_Controller_UIStateActionsCallbackInterfaces = new List<IController_UIStateActions>();
    private readonly InputAction m_Controller_UIState_CloseUIState;
    private readonly InputAction m_Controller_UIState_NextUIState;
    private readonly InputAction m_Controller_UIState_PreviousUIState;
    /// <summary>
    /// Provides access to input actions defined in input action map "Controller_UIState".
    /// </summary>
    public struct Controller_UIStateActions
    {
        private @PlayerControls m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public Controller_UIStateActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "Controller_UIState/CloseUIState".
        /// </summary>
        public InputAction @CloseUIState => m_Wrapper.m_Controller_UIState_CloseUIState;
        /// <summary>
        /// Provides access to the underlying input action "Controller_UIState/NextUIState".
        /// </summary>
        public InputAction @NextUIState => m_Wrapper.m_Controller_UIState_NextUIState;
        /// <summary>
        /// Provides access to the underlying input action "Controller_UIState/PreviousUIState".
        /// </summary>
        public InputAction @PreviousUIState => m_Wrapper.m_Controller_UIState_PreviousUIState;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_Controller_UIState; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="Controller_UIStateActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(Controller_UIStateActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="Controller_UIStateActions" />
        public void AddCallbacks(IController_UIStateActions instance)
        {
            if (instance == null || m_Wrapper.m_Controller_UIStateActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Controller_UIStateActionsCallbackInterfaces.Add(instance);
            @CloseUIState.started += instance.OnCloseUIState;
            @CloseUIState.performed += instance.OnCloseUIState;
            @CloseUIState.canceled += instance.OnCloseUIState;
            @NextUIState.started += instance.OnNextUIState;
            @NextUIState.performed += instance.OnNextUIState;
            @NextUIState.canceled += instance.OnNextUIState;
            @PreviousUIState.started += instance.OnPreviousUIState;
            @PreviousUIState.performed += instance.OnPreviousUIState;
            @PreviousUIState.canceled += instance.OnPreviousUIState;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="Controller_UIStateActions" />
        private void UnregisterCallbacks(IController_UIStateActions instance)
        {
            @CloseUIState.started -= instance.OnCloseUIState;
            @CloseUIState.performed -= instance.OnCloseUIState;
            @CloseUIState.canceled -= instance.OnCloseUIState;
            @NextUIState.started -= instance.OnNextUIState;
            @NextUIState.performed -= instance.OnNextUIState;
            @NextUIState.canceled -= instance.OnNextUIState;
            @PreviousUIState.started -= instance.OnPreviousUIState;
            @PreviousUIState.performed -= instance.OnPreviousUIState;
            @PreviousUIState.canceled -= instance.OnPreviousUIState;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="Controller_UIStateActions.UnregisterCallbacks(IController_UIStateActions)" />.
        /// </summary>
        /// <seealso cref="Controller_UIStateActions.UnregisterCallbacks(IController_UIStateActions)" />
        public void RemoveCallbacks(IController_UIStateActions instance)
        {
            if (m_Wrapper.m_Controller_UIStateActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="Controller_UIStateActions.AddCallbacks(IController_UIStateActions)" />
        /// <seealso cref="Controller_UIStateActions.RemoveCallbacks(IController_UIStateActions)" />
        /// <seealso cref="Controller_UIStateActions.UnregisterCallbacks(IController_UIStateActions)" />
        public void SetCallbacks(IController_UIStateActions instance)
        {
            foreach (var item in m_Wrapper.m_Controller_UIStateActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Controller_UIStateActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="Controller_UIStateActions" /> instance referencing this action map.
    /// </summary>
    public Controller_UIStateActions @Controller_UIState => new Controller_UIStateActions(this);

    // Controller_QuestsUI
    private readonly InputActionMap m_Controller_QuestsUI;
    private List<IController_QuestsUIActions> m_Controller_QuestsUIActionsCallbackInterfaces = new List<IController_QuestsUIActions>();
    private readonly InputAction m_Controller_QuestsUI_NextQuestPage;
    private readonly InputAction m_Controller_QuestsUI_PreviousQuestPage;
    /// <summary>
    /// Provides access to input actions defined in input action map "Controller_QuestsUI".
    /// </summary>
    public struct Controller_QuestsUIActions
    {
        private @PlayerControls m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public Controller_QuestsUIActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "Controller_QuestsUI/NextQuestPage".
        /// </summary>
        public InputAction @NextQuestPage => m_Wrapper.m_Controller_QuestsUI_NextQuestPage;
        /// <summary>
        /// Provides access to the underlying input action "Controller_QuestsUI/PreviousQuestPage".
        /// </summary>
        public InputAction @PreviousQuestPage => m_Wrapper.m_Controller_QuestsUI_PreviousQuestPage;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_Controller_QuestsUI; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="Controller_QuestsUIActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(Controller_QuestsUIActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="Controller_QuestsUIActions" />
        public void AddCallbacks(IController_QuestsUIActions instance)
        {
            if (instance == null || m_Wrapper.m_Controller_QuestsUIActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Controller_QuestsUIActionsCallbackInterfaces.Add(instance);
            @NextQuestPage.started += instance.OnNextQuestPage;
            @NextQuestPage.performed += instance.OnNextQuestPage;
            @NextQuestPage.canceled += instance.OnNextQuestPage;
            @PreviousQuestPage.started += instance.OnPreviousQuestPage;
            @PreviousQuestPage.performed += instance.OnPreviousQuestPage;
            @PreviousQuestPage.canceled += instance.OnPreviousQuestPage;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="Controller_QuestsUIActions" />
        private void UnregisterCallbacks(IController_QuestsUIActions instance)
        {
            @NextQuestPage.started -= instance.OnNextQuestPage;
            @NextQuestPage.performed -= instance.OnNextQuestPage;
            @NextQuestPage.canceled -= instance.OnNextQuestPage;
            @PreviousQuestPage.started -= instance.OnPreviousQuestPage;
            @PreviousQuestPage.performed -= instance.OnPreviousQuestPage;
            @PreviousQuestPage.canceled -= instance.OnPreviousQuestPage;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="Controller_QuestsUIActions.UnregisterCallbacks(IController_QuestsUIActions)" />.
        /// </summary>
        /// <seealso cref="Controller_QuestsUIActions.UnregisterCallbacks(IController_QuestsUIActions)" />
        public void RemoveCallbacks(IController_QuestsUIActions instance)
        {
            if (m_Wrapper.m_Controller_QuestsUIActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="Controller_QuestsUIActions.AddCallbacks(IController_QuestsUIActions)" />
        /// <seealso cref="Controller_QuestsUIActions.RemoveCallbacks(IController_QuestsUIActions)" />
        /// <seealso cref="Controller_QuestsUIActions.UnregisterCallbacks(IController_QuestsUIActions)" />
        public void SetCallbacks(IController_QuestsUIActions instance)
        {
            foreach (var item in m_Wrapper.m_Controller_QuestsUIActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Controller_QuestsUIActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="Controller_QuestsUIActions" /> instance referencing this action map.
    /// </summary>
    public Controller_QuestsUIActions @Controller_QuestsUI => new Controller_QuestsUIActions(this);

    // Controller_InventoryUI
    private readonly InputActionMap m_Controller_InventoryUI;
    private List<IController_InventoryUIActions> m_Controller_InventoryUIActionsCallbackInterfaces = new List<IController_InventoryUIActions>();
    private readonly InputAction m_Controller_InventoryUI_NextInventoryPage;
    private readonly InputAction m_Controller_InventoryUI_PreviousInventoryPage;
    /// <summary>
    /// Provides access to input actions defined in input action map "Controller_InventoryUI".
    /// </summary>
    public struct Controller_InventoryUIActions
    {
        private @PlayerControls m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public Controller_InventoryUIActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "Controller_InventoryUI/NextInventoryPage".
        /// </summary>
        public InputAction @NextInventoryPage => m_Wrapper.m_Controller_InventoryUI_NextInventoryPage;
        /// <summary>
        /// Provides access to the underlying input action "Controller_InventoryUI/PreviousInventoryPage".
        /// </summary>
        public InputAction @PreviousInventoryPage => m_Wrapper.m_Controller_InventoryUI_PreviousInventoryPage;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_Controller_InventoryUI; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="Controller_InventoryUIActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(Controller_InventoryUIActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="Controller_InventoryUIActions" />
        public void AddCallbacks(IController_InventoryUIActions instance)
        {
            if (instance == null || m_Wrapper.m_Controller_InventoryUIActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Controller_InventoryUIActionsCallbackInterfaces.Add(instance);
            @NextInventoryPage.started += instance.OnNextInventoryPage;
            @NextInventoryPage.performed += instance.OnNextInventoryPage;
            @NextInventoryPage.canceled += instance.OnNextInventoryPage;
            @PreviousInventoryPage.started += instance.OnPreviousInventoryPage;
            @PreviousInventoryPage.performed += instance.OnPreviousInventoryPage;
            @PreviousInventoryPage.canceled += instance.OnPreviousInventoryPage;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="Controller_InventoryUIActions" />
        private void UnregisterCallbacks(IController_InventoryUIActions instance)
        {
            @NextInventoryPage.started -= instance.OnNextInventoryPage;
            @NextInventoryPage.performed -= instance.OnNextInventoryPage;
            @NextInventoryPage.canceled -= instance.OnNextInventoryPage;
            @PreviousInventoryPage.started -= instance.OnPreviousInventoryPage;
            @PreviousInventoryPage.performed -= instance.OnPreviousInventoryPage;
            @PreviousInventoryPage.canceled -= instance.OnPreviousInventoryPage;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="Controller_InventoryUIActions.UnregisterCallbacks(IController_InventoryUIActions)" />.
        /// </summary>
        /// <seealso cref="Controller_InventoryUIActions.UnregisterCallbacks(IController_InventoryUIActions)" />
        public void RemoveCallbacks(IController_InventoryUIActions instance)
        {
            if (m_Wrapper.m_Controller_InventoryUIActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="Controller_InventoryUIActions.AddCallbacks(IController_InventoryUIActions)" />
        /// <seealso cref="Controller_InventoryUIActions.RemoveCallbacks(IController_InventoryUIActions)" />
        /// <seealso cref="Controller_InventoryUIActions.UnregisterCallbacks(IController_InventoryUIActions)" />
        public void SetCallbacks(IController_InventoryUIActions instance)
        {
            foreach (var item in m_Wrapper.m_Controller_InventoryUIActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Controller_InventoryUIActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="Controller_InventoryUIActions" /> instance referencing this action map.
    /// </summary>
    public Controller_InventoryUIActions @Controller_InventoryUI => new Controller_InventoryUIActions(this);

    // Controller_EquipmentUI
    private readonly InputActionMap m_Controller_EquipmentUI;
    private List<IController_EquipmentUIActions> m_Controller_EquipmentUIActionsCallbackInterfaces = new List<IController_EquipmentUIActions>();
    /// <summary>
    /// Provides access to input actions defined in input action map "Controller_EquipmentUI".
    /// </summary>
    public struct Controller_EquipmentUIActions
    {
        private @PlayerControls m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public Controller_EquipmentUIActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_Controller_EquipmentUI; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="Controller_EquipmentUIActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(Controller_EquipmentUIActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="Controller_EquipmentUIActions" />
        public void AddCallbacks(IController_EquipmentUIActions instance)
        {
            if (instance == null || m_Wrapper.m_Controller_EquipmentUIActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Controller_EquipmentUIActionsCallbackInterfaces.Add(instance);
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="Controller_EquipmentUIActions" />
        private void UnregisterCallbacks(IController_EquipmentUIActions instance)
        {
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="Controller_EquipmentUIActions.UnregisterCallbacks(IController_EquipmentUIActions)" />.
        /// </summary>
        /// <seealso cref="Controller_EquipmentUIActions.UnregisterCallbacks(IController_EquipmentUIActions)" />
        public void RemoveCallbacks(IController_EquipmentUIActions instance)
        {
            if (m_Wrapper.m_Controller_EquipmentUIActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="Controller_EquipmentUIActions.AddCallbacks(IController_EquipmentUIActions)" />
        /// <seealso cref="Controller_EquipmentUIActions.RemoveCallbacks(IController_EquipmentUIActions)" />
        /// <seealso cref="Controller_EquipmentUIActions.UnregisterCallbacks(IController_EquipmentUIActions)" />
        public void SetCallbacks(IController_EquipmentUIActions instance)
        {
            foreach (var item in m_Wrapper.m_Controller_EquipmentUIActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Controller_EquipmentUIActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="Controller_EquipmentUIActions" /> instance referencing this action map.
    /// </summary>
    public Controller_EquipmentUIActions @Controller_EquipmentUI => new Controller_EquipmentUIActions(this);

    // Controller_SystemUI
    private readonly InputActionMap m_Controller_SystemUI;
    private List<IController_SystemUIActions> m_Controller_SystemUIActionsCallbackInterfaces = new List<IController_SystemUIActions>();
    /// <summary>
    /// Provides access to input actions defined in input action map "Controller_SystemUI".
    /// </summary>
    public struct Controller_SystemUIActions
    {
        private @PlayerControls m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public Controller_SystemUIActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_Controller_SystemUI; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="Controller_SystemUIActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(Controller_SystemUIActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="Controller_SystemUIActions" />
        public void AddCallbacks(IController_SystemUIActions instance)
        {
            if (instance == null || m_Wrapper.m_Controller_SystemUIActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Controller_SystemUIActionsCallbackInterfaces.Add(instance);
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="Controller_SystemUIActions" />
        private void UnregisterCallbacks(IController_SystemUIActions instance)
        {
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="Controller_SystemUIActions.UnregisterCallbacks(IController_SystemUIActions)" />.
        /// </summary>
        /// <seealso cref="Controller_SystemUIActions.UnregisterCallbacks(IController_SystemUIActions)" />
        public void RemoveCallbacks(IController_SystemUIActions instance)
        {
            if (m_Wrapper.m_Controller_SystemUIActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="Controller_SystemUIActions.AddCallbacks(IController_SystemUIActions)" />
        /// <seealso cref="Controller_SystemUIActions.RemoveCallbacks(IController_SystemUIActions)" />
        /// <seealso cref="Controller_SystemUIActions.UnregisterCallbacks(IController_SystemUIActions)" />
        public void SetCallbacks(IController_SystemUIActions instance)
        {
            foreach (var item in m_Wrapper.m_Controller_SystemUIActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Controller_SystemUIActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="Controller_SystemUIActions" /> instance referencing this action map.
    /// </summary>
    public Controller_SystemUIActions @Controller_SystemUI => new Controller_SystemUIActions(this);

    // Controller_Map
    private readonly InputActionMap m_Controller_Map;
    private List<IController_MapActions> m_Controller_MapActionsCallbackInterfaces = new List<IController_MapActions>();
    private readonly InputAction m_Controller_Map_CloseMap;
    /// <summary>
    /// Provides access to input actions defined in input action map "Controller_Map".
    /// </summary>
    public struct Controller_MapActions
    {
        private @PlayerControls m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public Controller_MapActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "Controller_Map/CloseMap".
        /// </summary>
        public InputAction @CloseMap => m_Wrapper.m_Controller_Map_CloseMap;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_Controller_Map; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="Controller_MapActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(Controller_MapActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="Controller_MapActions" />
        public void AddCallbacks(IController_MapActions instance)
        {
            if (instance == null || m_Wrapper.m_Controller_MapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Controller_MapActionsCallbackInterfaces.Add(instance);
            @CloseMap.started += instance.OnCloseMap;
            @CloseMap.performed += instance.OnCloseMap;
            @CloseMap.canceled += instance.OnCloseMap;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="Controller_MapActions" />
        private void UnregisterCallbacks(IController_MapActions instance)
        {
            @CloseMap.started -= instance.OnCloseMap;
            @CloseMap.performed -= instance.OnCloseMap;
            @CloseMap.canceled -= instance.OnCloseMap;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="Controller_MapActions.UnregisterCallbacks(IController_MapActions)" />.
        /// </summary>
        /// <seealso cref="Controller_MapActions.UnregisterCallbacks(IController_MapActions)" />
        public void RemoveCallbacks(IController_MapActions instance)
        {
            if (m_Wrapper.m_Controller_MapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="Controller_MapActions.AddCallbacks(IController_MapActions)" />
        /// <seealso cref="Controller_MapActions.RemoveCallbacks(IController_MapActions)" />
        /// <seealso cref="Controller_MapActions.UnregisterCallbacks(IController_MapActions)" />
        public void SetCallbacks(IController_MapActions instance)
        {
            foreach (var item in m_Wrapper.m_Controller_MapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Controller_MapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="Controller_MapActions" /> instance referencing this action map.
    /// </summary>
    public Controller_MapActions @Controller_Map => new Controller_MapActions(this);

    // Controller_Dialogues
    private readonly InputActionMap m_Controller_Dialogues;
    private List<IController_DialoguesActions> m_Controller_DialoguesActionsCallbackInterfaces = new List<IController_DialoguesActions>();
    private readonly InputAction m_Controller_Dialogues_Continue;
    /// <summary>
    /// Provides access to input actions defined in input action map "Controller_Dialogues".
    /// </summary>
    public struct Controller_DialoguesActions
    {
        private @PlayerControls m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public Controller_DialoguesActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "Controller_Dialogues/Continue".
        /// </summary>
        public InputAction @Continue => m_Wrapper.m_Controller_Dialogues_Continue;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_Controller_Dialogues; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="Controller_DialoguesActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(Controller_DialoguesActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="Controller_DialoguesActions" />
        public void AddCallbacks(IController_DialoguesActions instance)
        {
            if (instance == null || m_Wrapper.m_Controller_DialoguesActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Controller_DialoguesActionsCallbackInterfaces.Add(instance);
            @Continue.started += instance.OnContinue;
            @Continue.performed += instance.OnContinue;
            @Continue.canceled += instance.OnContinue;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="Controller_DialoguesActions" />
        private void UnregisterCallbacks(IController_DialoguesActions instance)
        {
            @Continue.started -= instance.OnContinue;
            @Continue.performed -= instance.OnContinue;
            @Continue.canceled -= instance.OnContinue;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="Controller_DialoguesActions.UnregisterCallbacks(IController_DialoguesActions)" />.
        /// </summary>
        /// <seealso cref="Controller_DialoguesActions.UnregisterCallbacks(IController_DialoguesActions)" />
        public void RemoveCallbacks(IController_DialoguesActions instance)
        {
            if (m_Wrapper.m_Controller_DialoguesActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="Controller_DialoguesActions.AddCallbacks(IController_DialoguesActions)" />
        /// <seealso cref="Controller_DialoguesActions.RemoveCallbacks(IController_DialoguesActions)" />
        /// <seealso cref="Controller_DialoguesActions.UnregisterCallbacks(IController_DialoguesActions)" />
        public void SetCallbacks(IController_DialoguesActions instance)
        {
            foreach (var item in m_Wrapper.m_Controller_DialoguesActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Controller_DialoguesActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="Controller_DialoguesActions" /> instance referencing this action map.
    /// </summary>
    public Controller_DialoguesActions @Controller_Dialogues => new Controller_DialoguesActions(this);

    // Controller_Shop
    private readonly InputActionMap m_Controller_Shop;
    private List<IController_ShopActions> m_Controller_ShopActionsCallbackInterfaces = new List<IController_ShopActions>();
    private readonly InputAction m_Controller_Shop_CloseShop;
    /// <summary>
    /// Provides access to input actions defined in input action map "Controller_Shop".
    /// </summary>
    public struct Controller_ShopActions
    {
        private @PlayerControls m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public Controller_ShopActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "Controller_Shop/CloseShop".
        /// </summary>
        public InputAction @CloseShop => m_Wrapper.m_Controller_Shop_CloseShop;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_Controller_Shop; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="Controller_ShopActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(Controller_ShopActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="Controller_ShopActions" />
        public void AddCallbacks(IController_ShopActions instance)
        {
            if (instance == null || m_Wrapper.m_Controller_ShopActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Controller_ShopActionsCallbackInterfaces.Add(instance);
            @CloseShop.started += instance.OnCloseShop;
            @CloseShop.performed += instance.OnCloseShop;
            @CloseShop.canceled += instance.OnCloseShop;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="Controller_ShopActions" />
        private void UnregisterCallbacks(IController_ShopActions instance)
        {
            @CloseShop.started -= instance.OnCloseShop;
            @CloseShop.performed -= instance.OnCloseShop;
            @CloseShop.canceled -= instance.OnCloseShop;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="Controller_ShopActions.UnregisterCallbacks(IController_ShopActions)" />.
        /// </summary>
        /// <seealso cref="Controller_ShopActions.UnregisterCallbacks(IController_ShopActions)" />
        public void RemoveCallbacks(IController_ShopActions instance)
        {
            if (m_Wrapper.m_Controller_ShopActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="Controller_ShopActions.AddCallbacks(IController_ShopActions)" />
        /// <seealso cref="Controller_ShopActions.RemoveCallbacks(IController_ShopActions)" />
        /// <seealso cref="Controller_ShopActions.UnregisterCallbacks(IController_ShopActions)" />
        public void SetCallbacks(IController_ShopActions instance)
        {
            foreach (var item in m_Wrapper.m_Controller_ShopActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Controller_ShopActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="Controller_ShopActions" /> instance referencing this action map.
    /// </summary>
    public Controller_ShopActions @Controller_Shop => new Controller_ShopActions(this);
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "DetectController" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="DetectControllerActions.AddCallbacks(IDetectControllerActions)" />
    /// <seealso cref="DetectControllerActions.RemoveCallbacks(IDetectControllerActions)" />
    public interface IDetectControllerActions
    {
        /// <summary>
        /// Method invoked when associated input action "SwitchToController" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSwitchToController(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Keyboard_Player" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="Keyboard_PlayerActions.AddCallbacks(IKeyboard_PlayerActions)" />
    /// <seealso cref="Keyboard_PlayerActions.RemoveCallbacks(IKeyboard_PlayerActions)" />
    public interface IKeyboard_PlayerActions
    {
        /// <summary>
        /// Method invoked when associated input action "Movement" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMovement(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Sprint" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSprint(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Crouch" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnCrouch(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Jump" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnJump(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Interact" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnInteract(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "NormalAttack" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnNormalAttack(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "ChargedAttack" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnChargedAttack(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Skill0" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSkill0(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Skill1" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSkill1(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Skill2" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSkill2(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "OpenUIState" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnOpenUIState(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "OpenMap" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnOpenMap(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "ScrollWheel" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnScrollWheel(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "OpenConsole" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnOpenConsole(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "TurnCursorOnOff" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnTurnCursorOnOff(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Keyboard_UIState" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="Keyboard_UIStateActions.AddCallbacks(IKeyboard_UIStateActions)" />
    /// <seealso cref="Keyboard_UIStateActions.RemoveCallbacks(IKeyboard_UIStateActions)" />
    public interface IKeyboard_UIStateActions
    {
        /// <summary>
        /// Method invoked when associated input action "CloseUIState" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnCloseUIState(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "NextUIState" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnNextUIState(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "PreviousUIState" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPreviousUIState(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Keyboard_QuestsUI" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="Keyboard_QuestsUIActions.AddCallbacks(IKeyboard_QuestsUIActions)" />
    /// <seealso cref="Keyboard_QuestsUIActions.RemoveCallbacks(IKeyboard_QuestsUIActions)" />
    public interface IKeyboard_QuestsUIActions
    {
        /// <summary>
        /// Method invoked when associated input action "NextQuestPage" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnNextQuestPage(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "PreviousQuestPage" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPreviousQuestPage(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Keyboard_InventoryUI" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="Keyboard_InventoryUIActions.AddCallbacks(IKeyboard_InventoryUIActions)" />
    /// <seealso cref="Keyboard_InventoryUIActions.RemoveCallbacks(IKeyboard_InventoryUIActions)" />
    public interface IKeyboard_InventoryUIActions
    {
        /// <summary>
        /// Method invoked when associated input action "NextInventoryPage" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnNextInventoryPage(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "PreviousInventoryPage" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPreviousInventoryPage(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "NextInventorySlot" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnNextInventorySlot(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "PreviousInventorySlot" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPreviousInventorySlot(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Keyboard_EquipmentUI" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="Keyboard_EquipmentUIActions.AddCallbacks(IKeyboard_EquipmentUIActions)" />
    /// <seealso cref="Keyboard_EquipmentUIActions.RemoveCallbacks(IKeyboard_EquipmentUIActions)" />
    public interface IKeyboard_EquipmentUIActions
    {
        /// <summary>
        /// Method invoked when associated input action "NextInventoryPage" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnNextInventoryPage(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "PreviousInventoryPage" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPreviousInventoryPage(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "NextInventorySlot" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnNextInventorySlot(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "PreviousInventorySlot" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPreviousInventorySlot(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Keyboard_SystemUI" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="Keyboard_SystemUIActions.AddCallbacks(IKeyboard_SystemUIActions)" />
    /// <seealso cref="Keyboard_SystemUIActions.RemoveCallbacks(IKeyboard_SystemUIActions)" />
    public interface IKeyboard_SystemUIActions
    {
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Keyboard_Map" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="Keyboard_MapActions.AddCallbacks(IKeyboard_MapActions)" />
    /// <seealso cref="Keyboard_MapActions.RemoveCallbacks(IKeyboard_MapActions)" />
    public interface IKeyboard_MapActions
    {
        /// <summary>
        /// Method invoked when associated input action "CloseMap" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnCloseMap(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Keyboard_Dialogues" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="Keyboard_DialoguesActions.AddCallbacks(IKeyboard_DialoguesActions)" />
    /// <seealso cref="Keyboard_DialoguesActions.RemoveCallbacks(IKeyboard_DialoguesActions)" />
    public interface IKeyboard_DialoguesActions
    {
        /// <summary>
        /// Method invoked when associated input action "Continue" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnContinue(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Keyboard_Shop" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="Keyboard_ShopActions.AddCallbacks(IKeyboard_ShopActions)" />
    /// <seealso cref="Keyboard_ShopActions.RemoveCallbacks(IKeyboard_ShopActions)" />
    public interface IKeyboard_ShopActions
    {
        /// <summary>
        /// Method invoked when associated input action "CloseShop" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnCloseShop(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Keyboard_Console" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="Keyboard_ConsoleActions.AddCallbacks(IKeyboard_ConsoleActions)" />
    /// <seealso cref="Keyboard_ConsoleActions.RemoveCallbacks(IKeyboard_ConsoleActions)" />
    public interface IKeyboard_ConsoleActions
    {
        /// <summary>
        /// Method invoked when associated input action "ConfirmInput" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnConfirmInput(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "CloseConsole" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnCloseConsole(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "DetectMouseKeyboard" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="DetectMouseKeyboardActions.AddCallbacks(IDetectMouseKeyboardActions)" />
    /// <seealso cref="DetectMouseKeyboardActions.RemoveCallbacks(IDetectMouseKeyboardActions)" />
    public interface IDetectMouseKeyboardActions
    {
        /// <summary>
        /// Method invoked when associated input action "SwitchToMouseKeyboard" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSwitchToMouseKeyboard(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Controller_Player" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="Controller_PlayerActions.AddCallbacks(IController_PlayerActions)" />
    /// <seealso cref="Controller_PlayerActions.RemoveCallbacks(IController_PlayerActions)" />
    public interface IController_PlayerActions
    {
        /// <summary>
        /// Method invoked when associated input action "Movement" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMovement(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Sprint" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSprint(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Crouch" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnCrouch(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Jump" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnJump(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Interact" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnInteract(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "NormalAttack" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnNormalAttack(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "ChargedAttack" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnChargedAttack(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Skill1" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSkill1(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Skill2" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSkill2(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Skill3" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSkill3(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "OpenUIState" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnOpenUIState(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "OpenMap" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnOpenMap(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Controller_UIState" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="Controller_UIStateActions.AddCallbacks(IController_UIStateActions)" />
    /// <seealso cref="Controller_UIStateActions.RemoveCallbacks(IController_UIStateActions)" />
    public interface IController_UIStateActions
    {
        /// <summary>
        /// Method invoked when associated input action "CloseUIState" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnCloseUIState(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "NextUIState" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnNextUIState(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "PreviousUIState" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPreviousUIState(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Controller_QuestsUI" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="Controller_QuestsUIActions.AddCallbacks(IController_QuestsUIActions)" />
    /// <seealso cref="Controller_QuestsUIActions.RemoveCallbacks(IController_QuestsUIActions)" />
    public interface IController_QuestsUIActions
    {
        /// <summary>
        /// Method invoked when associated input action "NextQuestPage" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnNextQuestPage(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "PreviousQuestPage" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPreviousQuestPage(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Controller_InventoryUI" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="Controller_InventoryUIActions.AddCallbacks(IController_InventoryUIActions)" />
    /// <seealso cref="Controller_InventoryUIActions.RemoveCallbacks(IController_InventoryUIActions)" />
    public interface IController_InventoryUIActions
    {
        /// <summary>
        /// Method invoked when associated input action "NextInventoryPage" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnNextInventoryPage(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "PreviousInventoryPage" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPreviousInventoryPage(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Controller_EquipmentUI" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="Controller_EquipmentUIActions.AddCallbacks(IController_EquipmentUIActions)" />
    /// <seealso cref="Controller_EquipmentUIActions.RemoveCallbacks(IController_EquipmentUIActions)" />
    public interface IController_EquipmentUIActions
    {
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Controller_SystemUI" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="Controller_SystemUIActions.AddCallbacks(IController_SystemUIActions)" />
    /// <seealso cref="Controller_SystemUIActions.RemoveCallbacks(IController_SystemUIActions)" />
    public interface IController_SystemUIActions
    {
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Controller_Map" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="Controller_MapActions.AddCallbacks(IController_MapActions)" />
    /// <seealso cref="Controller_MapActions.RemoveCallbacks(IController_MapActions)" />
    public interface IController_MapActions
    {
        /// <summary>
        /// Method invoked when associated input action "CloseMap" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnCloseMap(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Controller_Dialogues" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="Controller_DialoguesActions.AddCallbacks(IController_DialoguesActions)" />
    /// <seealso cref="Controller_DialoguesActions.RemoveCallbacks(IController_DialoguesActions)" />
    public interface IController_DialoguesActions
    {
        /// <summary>
        /// Method invoked when associated input action "Continue" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnContinue(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Controller_Shop" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="Controller_ShopActions.AddCallbacks(IController_ShopActions)" />
    /// <seealso cref="Controller_ShopActions.RemoveCallbacks(IController_ShopActions)" />
    public interface IController_ShopActions
    {
        /// <summary>
        /// Method invoked when associated input action "CloseShop" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnCloseShop(InputAction.CallbackContext context);
    }
}
